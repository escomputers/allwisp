from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render,redirect
from django.urls import reverse
from django.core.files.storage import FileSystemStorage
from django.contrib.auth.decorators import login_required
import datetime
from django.contrib import messages
from django.forms import formset_factory,modelformset_factory
from apps.customer.models import Customer
from apps.expenses.models import Expense
from apps.items.models import DocumentItem

from .models import Document,  Preventivo, Nota_di_credito
from forms import offertainternetForm, cadenzapagamentoform, metodopagamento, offertavoipForm,prodottiFatturaForm,prodotti_preventivoForm,nota_di_creditoForm



# Create new document
@login_required
def new_document(request):

	# If no customer_id is defined, create a new document
	if request.method  == 'POST':
		ragionesociale = request.POST["ragionesociale"]
		tipo_documento = request.POST["documento"]
		if ragionesociale =='None':
			customers = Customer.objects.order_by('ragionesociale')
			context = {
				'title' : 'Nuova fattura',
				'customer_list' : customers,
				'message' : 'Seleziona un cliente',
				}
			return render(request, 'new_document.html', context)
		else:
			customer = get_object_or_404(Customer, pk=ragionesociale)
			idcliente = customer.customer_id
			idclientestr = str(idcliente)
			url = idclientestr + "-" + tipo_documento

			return HttpResponseRedirect(reverse('document', args=[url]))
			
	else:
		# Customer list needed to populate select field
		customers = Customer.objects.order_by('ragionesociale')
		context = {
			'title' : 'New Document',
			'customer_list' : customers,
		}
		return render(request, 'new_document.html', context)



@login_required
def document(request, url):
	
	#if request.method  == 'POST':
			dataoggi=datetime.date.today()
			idclientestr=url.split('-')[0]
			idcliente=int(idclientestr)
			tipo_documento=url.split('-')[1]
			
			if tipo_documento == 'preventivo':
				customer = get_object_or_404(Customer, pk=idcliente)
				nome_documento='Preventivo'
				status='preventivo'
				anno_corrente = dataoggi.year
				anno_corrente_stringa = str(anno_corrente)
				try:
					id_dal_databse=Preventivo.objects.latest('document_id')
					id_ultimo=id_dal_databse.document_id
					print(id_ultimo)
					id_solo_serie=id_ultimo.split('-')[0]
					id_integer=int(id_solo_serie)
					idincremento=id_integer+1
					#estrazione solo anno inserito
					anno_inserito=id_ultimo.split('-')[1]
					if anno_corrente_stringa == anno_inserito:
						document_id=str(idincremento) +'-' + anno_corrente_stringa
					else:
						document_id=str(1)+ '-' + anno_corrente_stringa
				
				except Preventivo.DoesNotExist:
					document_id=str(1) + '-' + anno_corrente_stringa
				
				document =  Preventivo( document_id=document_id, customer=customer, date=dataoggi,status=status, pagamentofattura=dataoggi, documento =nome_documento)
						
				try:
					
					document.save()


					context = {
					'title' : 'Document ' + document_id,
					'document' : document,
					#'formset':formset,
					'message':'dati salvati correttamente',
					}
					
					return render(request, 'document.html', context)

					
			
				except:
							context={
							'title' : 'Document ' + document_id,
							'document' : document,
							'message':'Errore, I prodotti del preventivo non sono stati correttamente salvati. Riprova',
							
							}
							return render(request, 'document.html', context)

			


			elif tipo_documento =='fattura':
				customer = get_object_or_404(Customer, pk=idcliente)
				nome_documento='Fattura'
				status='non-pagato'
				anno_corrente = dataoggi.year
				anno_corrente_stringa = str(anno_corrente)
				try:
					id_dal_databse=Document.objects.latest("document_id")
					id_ultimo=id_dal_databse.document_id
					id_solo_serie=id_ultimo.split('-')[0]
					id_integer=int(id_solo_serie)
					idincremento=id_integer+1
					#estrazione solo anno inserito
					anno_inserito=id_ultimo.split('-')[1]
					if anno_corrente_stringa == anno_inserito:
						document_id=str(idincremento) +'-' + anno_corrente_stringa
					else:
						document_id=str(1)+ '-' + anno_corrente_stringa
				
				except Document.DoesNotExist:
					document_id=str(1)+ '-' + anno_corrente_stringa
				
				document =  Document( documento=nome_documento, document_id=document_id, customer=customer, date=dataoggi,status=status, pagamentofattura=dataoggi)
						
				try:
					
					document.save()
					

					context = {
					'title' : 'Document ' + document_id,
					'document' : document,
					#'formset':formset,
					'message':'dati salvati correttamente',
					}
					
					return render(request, 'document.html', context)

					
			
				except:
							context={
							'title' : 'Document ' + document_id,
							'document' : document,
							
							'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
							
							}
							return render(request, 'document.html', context)


			elif tipo_documento =='nota_di_credito':
				customer = get_object_or_404(Customer, pk=idcliente)
				nome_documento='Nota di credito'
				#fattura_riferimento=get_object_or_404(Document, pk=)
				status='annullamento fattura n.'
				anno_corrente = dataoggi.year
				anno_corrente_stringa = str(anno_corrente)
				try:
					id_dal_databse=Document.objects.latest("document_id")
					id_ultimo=id_dal_databse.document_id
					id_solo_serie=id_ultimo.split('-')[0]
					id_integer=int(id_solo_serie)
					idincremento=id_integer+1
					#estrazione solo anno inserito
					anno_inserito=id_ultimo.split('-')[1]
					if anno_corrente_stringa == anno_inserito:
						document_id=str(idincremento) +'-' + anno_corrente_stringa
					else:
						document_id=str(1)+ '-' + anno_corrente_stringa
				
				except Document.DoesNotExist:
					document_id=str(1)+ '-' + anno_corrente_stringa
				
				document =  Nota_di_credito( documento=nome_documento, document_id=document_id, customer=customer, date=dataoggi,status=status, pagamentofattura=dataoggi)
						
				try:
					
					document.save()
					

					context = {
					'title' : 'Document ' + document_id,
					'document' : document,
					#'formset':formset,
					'message':'dati salvati correttamente',
					}
					
					return render(request, 'document.html', context)

					
			
				except:
							context={
							'title' : 'Document ' + document_id,
							'document' : document,
							
							'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
							
							}
							return render(request, 'document.html', context)
	

	#else:
		
		#return redirect(reverse('new_document'))









# Default document list, show 25 recent documents
@login_required
def index(request):
    documents = Document.objects.order_by('-date')[:25]
    context = {
		'title' : 'Recent Documents',
        'document_list' : documents,
    }
    return render(request, 'index.html', context)




# Show big list of all documents
@login_required
def all_documents(request):
    documents = Document.objects.order_by('-date')
    context = {
		'title' : 'All Documents',
        'document_list' : documents,
    }
    return render(request, 'index.html', context)



# Show draft documents
@login_required
def draft_documents(request):
    documents = Document.objects.filter(status='Draft').order_by('-date')
    context = {
		'title' : 'Draft Documents',
        'document_list' : documents,
    }
    return render(request, 'index.html', context)



# Show paid documents
@login_required
def paid_documents(request):
    documents = Document.objects.filter(status='Paid').order_by('-date')
    context = {
		'title' : 'Paid Documents',
        'document_list' : documents,
    }
    return render(request, 'index.html', context)



# Show unpaid documents
@login_required
def unpaid_documents(request):
    documents = Document.objects.filter(status='Unpaid').order_by('-date')
    context = {
		'title' : 'Unpaid Documents',
        'document_list' : documents,
    }
    return render(request, 'index.html', context)

#itemFattura(request, document_id)

'''# Display a specific document.
@login_required
def document(request, document_id):
			datitemporanei=dati_temporanei.objects.last()
			date=datitemporanei.date
			status='non-pagato'
			pagamentofattura=date
			customer=datitemporanei.customer
			print(customer)
			print(status)
			print(pagamentofattura)
			print(date)
			
			document =  Document( document_id=datitemporanei.document_id, customer=customer, date=date,status=status, pagamentofattura=pagamentofattura)
			FatturaFormSet=modelformset_factory(Document, form=prodottiForm)
			formset=FatturaFormSet(request.POST, queryset= prodotti.objects.none(), prefix='prodotti_fattura')
			
			
				
			if formset.is_valid():
					
					try:
						
						document.save()

						
						for prodotto in formset:
							data=prodotto.save(commit=False)
							data.document=document.id
							data.save()
							print(prodotto)
							print(type(prodotto))
							eliminaprimodato=dati_temporanei.objects.all()
							eliminaprimodato.delete()
							context = {
							'title' : 'Document ' + document_id,
							'document' : document,
							'formset':formset,
							'message':'dati salvati correttamente',
							}
							
							return render(request, 'document.html', context)
				
					except:
								formset=FatturaFormSet()
								eliminaprimodato=dati_temporanei.objects.last()
								eliminaprimodato.delete()
								context={
								'title' : 'Document ' + document_id,
								'document' : document,
								'formset':formset,
								'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
								
								}
								return render(reverse('new_document'))



			else:
								formset=FatturaFormSet()
								eliminaprimodato=dati_temporanei.objects.last()
								eliminaprimodato.delete()
								context={
								'title' : 'Document ' + document_id,
								'document' : document,
								'formset':formset,
								'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
								
								}
								return render(request, 'document.html', context)
				
			else:
				document = Document( document_id=document_id, customer=customer, date=dataoggi)
				print(document,'ciao')
				print(type(document))
				formset = prodottiformSet()
				context = {
				'title' : 'Document ' + str(document_id),
				'document' : document,
				'formset':formset,
				'message':'ci sono satati degli errori controlla e reinvia'
				}

				return render(request, 'document.html', context)'''
	



'''# Search for document
@login_required(login_url='login/')
def search_document(request):
    id = request.POST['id']
    return HttpResponseRedirect(reverse('document', args=(id,)))'''





# Print document
@login_required
def print_document(request, document_id):
    document = get_object_or_404(Document, pk=document_id)
    context = {
		'title' : "Document " + str(document_id),
	    'document' : document,
	}
    return render(request, 'print_document.html', context)



# Delete an document
@login_required
def delete_document(request, document_id):
    document = get_object_or_404(Document, pk=document_id)
    document.delete()
    return HttpResponseRedirect(reverse('index'))



# Update document
@login_required
def update_document(request, document_id):
	document = get_object_or_404(Document, pk=document_id)
	try:
		document.date = datetime.datetime.strptime(request.POST['date'], "%d/%m/%Y")
		document.status = request.POST['status']
		document.save()
	except (KeyError, Document.DoesNotExist):
		return render(request, 'document.html', {
			'document': document,
			'error_message': 'Si è verificato un problema, non sono stato in grado di aggiornare la fattura',
		})
	else:
		context = {
			'confirm_update' : True,
			'title' : 'Document ' + str(document_id),
			'document' : document,
			}
		return render(request, 'document.html', context)



# Upload attachment for document
@login_required
def upload_document_attachment(request, document_id):
    myfile = request.FILES['file']
    document = get_object_or_404(Document, pk=document_id)

    fs = FileSystemStorage()
    fs.save(myfile.name, myfile)

    e = document.documentattachment_set.create(file=myfile, displayname=myfile.name)
    e.save()

    return HttpResponseRedirect(reverse('document', args=(document.id,)))



# Delete attachment from document
@login_required
def delete_document_attachment(request, document_id, documentattachment_id):
	document = get_object_or_404(Document, pk=document_id)
	documentattachment = get_object_or_404(DocumentAttachment, pk=documentattachment_id)
	try:
		documentattachment.delete()
		fs = FileSystemStorage()
		fs.delete(documentattachment)
	except:
		context = {
			'error_message' : "Unable to delete attachment!",
			'document_id' : document_id
		}
		return render(request, 'view_document.html', context)
	else:
		return HttpResponseRedirect(reverse('document', args=(document.id,)))
