
from django.shortcuts import render, get_object_or_404, redirect
from django.http import HttpResponse, Http404
from django.contrib import messages
import json, os, subprocess, re
from datetime import datetime
from subprocess import Popen, PIPE
from datetime import datetime, timedelta 
from django.http import JsonResponse, HttpResponse, HttpResponseRedirect
from django.conf import settings
from django.template.loader import get_template
from django.contrib.auth.decorators import login_required, user_passes_test
from todo.utils import staff_check

from django.core.serializers import serialize
from django.forms.models import model_to_dict
from django.urls import reverse
from todo.forms import EventForm
from todo.models import Evento


@login_required
@user_passes_test(staff_check)
def calendario(request):
	form = EventForm(request.POST)
	if form.is_valid():
		form.save()
		ultimo_evento = Evento.objects.all().last()

		def_ultimo_evento = str(ultimo_evento)
		
		#get event id
		last_id = def_ultimo_evento.split(",start")[0]
		
		#Get event title
		start_title = "start,"
		end_title = ",end,"
		title_ultimo_evento = def_ultimo_evento[def_ultimo_evento.find(start_title)+len(start_title):def_ultimo_evento.rfind(end_title)]
		
		#Get event start date
		start_date = "startdate,"
		end_date = ",enddate"
		date_ultimo_evento = def_ultimo_evento[def_ultimo_evento.find(start_date)+len(start_date):def_ultimo_evento.rfind(end_date)]

		#Calcolo differenza in giorni tra data utente e oggi
		date_format = "%Y-%m-%d"
		
		a = datetime.strptime(date_ultimo_evento, date_format)
		
		oggi = datetime.today().strftime('%Y-%m-%d')
		b = datetime.strptime(oggi, date_format)
		
		delta = a - b
			
		day_before = "12:30 " + "+" + str(delta.days - 1) + " days"

		pattern = "True"
		
		if pattern in def_ultimo_evento:
			currentuser = request.user

			with open("json/mail.html", "r") as f:
				stringa = f.read()
			def_filemail = stringa.replace("contenuto", title_ultimo_evento)
			
			with open("json/%s.html" % last_id, "w") as f:
				f.write(def_filemail)
				f.close()
				
			
			with open("json/%s.json" % last_id, "a+") as f:
				#f.write("/usr/bin/echo " + "'" + title_ultimo_evento + "'" + " | " + "/usr/bin/mail " + "-s " + "'Notifica evento in scadenza domani' " +  currentuser.email)
				f.write("/usr/bin/mailx " + "-a " + "'Content-Type: text/html' " + "-s " + "'Notifica evento in scadenza domani' " + currentuser.email + " < " + "json/%s.html" % last_id)
				f.close()
				
			subprocess.call(["/usr/bin/at", day_before, "-f", "json/%s.json" % last_id])
			
		
		return render(request, 'todo/calendar.html', context={'form': EventForm()})
	return render(request, 'todo/calendar.html', context={'form': EventForm()})
	
@login_required
@user_passes_test(staff_check)	
def events_list(request):
	events = Evento.objects.all()
	return JsonResponse(list(map(lambda x: model_to_dict(x), events)), safe=False)

	
@login_required
@user_passes_test(staff_check)	
def delete_event(request):
	ajaxvardict = json.loads(request.POST['data'])
	id_to_delete = ajaxvardict.get('eventId')
	
	b = get_object_or_404(Evento, pk = id_to_delete)
	b.delete()
	try:
		os.remove("json/%s.json" % id_to_delete)
		os.remove("json/%s.html" % id_to_delete)
	except OSError:
		pass
		
	return render(request, 'todo/calendar.html', context={'form': EventForm()})
	
	