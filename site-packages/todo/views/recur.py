from django.shortcuts import render, get_object_or_404, redirect
from django.http import HttpResponse, Http404, HttpRequest
from django.contrib import messages

from datetime import datetime, timedelta
import time, json, uuid
from django.http import JsonResponse, HttpResponse, HttpResponseRedirect
from django.conf import settings
from django.template.loader import get_template, render_to_string
from django.contrib.auth.decorators import login_required, user_passes_test
from todo.utils import staff_check

from django.core.serializers import serialize
from django.forms.models import model_to_dict
from django.urls import reverse
from django.utils import timezone
from django.core.cache import cache

from django_q.models import Schedule, Task
from django_q.tasks import schedule, Schedule

from apps.customer.models import Customer
from apps.items.models import InvoiceItem
from apps.invoices.models import Proforma

def new_recur_single_customer(id_cliente):

	cliente = get_object_or_404(Customer, pk=id_cliente)
	 
	ragionesociale = cliente.ragionesociale
	cf = cliente.codicefiscale
	piva = cliente.piva
	pec = cliente.pec
	sdi = cliente.codiceunivoco_sdi
	
	ind_inst = cliente.indirizzo_inst
	comune_inst = cliente.comune_inst
	cap_inst = cliente.cap_inst
	prov_inst = cliente.prov_inst
	
	ind_leg = cliente.indirizzo_res
	comune_leg = cliente.comune_res
	cap_leg = cliente.cap_res
	prov_leg = cliente.prov_res
	
	tipo_pagamento = cliente.metodo_pagamento
	
	servizio1 = cliente.offerta_internet.nomeofferta
	descr_servizio1 = cliente.offerta_internet.descrizione
	prezzo_servizio1 = cliente.offerta_internet.prezzo
	iva_servizio1 = cliente.offerta_internet.iva
	#classe_iva_servizio1 = cliente.
	
	#servizio2 = cliente.
	#descr_servizio2 = cliente.
	#prezzo_servizio2 = cliente.
	#iva_servizio2 = cliente.
	#classe_iva_servizio2 = cliente.
	
	#extra_piu = cliente.
	#iva_extra_piu = cliente.
	#classe_iva_extra_piu = cliente.
	
	#extra_meno = cliente.
	#iva_extra_meno = cliente.
	#classe_iva_extra_meno = cliente.
	
	spese_incasso = cliente.spese_invio_bolletta
	#iva_spese_incasso = cliente.
	#classe_iva_spese_incasso = cliente.
	
	cadenza = cliente.cadenza_pagamento
	data_att = cliente.data_inizio_contratto

	"""
	(tipo_pagamento)#<class 'apps.items.models.metodopagamento'>
	(prezzo_servizio1)#<class 'decimal.Decimal'>
	(iva_servizio1)#<class 'int'>
	(cadenza)#<class 'apps.items.models.cadenzapagamento'>
	(data_att)#<class 'datetime.date'>
	"""
	#spese_spedizione = cliente.
	#iva_spese_spedizione = cliente.
	#classe_iva_spese_spedizione = cliente.
  
	"""
	mail = EmailMultiAlternatives(subject, message, from_email, recipient_list, connection=connection)
	"""
	

@login_required
@user_passes_test(staff_check)
def recur(request):
	try:
		customers = Customer.objects.all() 
		
		#tipi_doc = 
		
		try:
			tasks_pending = Schedule.objects.filter(cluster='DjangORMrecur')
			tasks_success = Task.objects.filter(success='1')
			#for i in tasks_pending:
			#   print(i.next_run)
		except Schedule.DoesNotExist:
			tasks_pending = None
			tasks_success = None
			
	except Customer.DoesNotExist:
		tasks_success = None
		tasks_pending = None
		customers = 'Nessun cliente'
	
	return render(request, 'todo/recur.html', context={'clienti': customers, 'tasks_pending': tasks_pending, 'tasks_success': tasks_success})

  
@login_required
@user_passes_test(staff_check)
def recur_form(request):
	#get data from ajax form
	ajax_form = json.loads(request.POST['data']) 
	#titolo = ajax_form.get('title')
	#data_avvio = ajax_form.get('next_run')
	#start = ajax_form.get('inizio')
	#end = ajax_form.get('fine')
	#all_customers = ajax_form.get('tutti_clienti')
	#Trasforma la data da stringa a oggetto data
	#data_avvio_converted = datetime.strptime(data_avvio, '%Y-%M-%d')
	#aware_data_avvio = timezone.make_aware(data_avvio_converted)
	id_cliente = ajax_form.get('customer')

	cliente = get_object_or_404(Customer, pk=id_cliente)

	#CALCOLO PARAMETRO NEXT_RUN
	cadenza = cliente.cadenza_pagamento
	data_fine = cliente.data_fine_contratto 

	#aware_data_avvio =
	
	"""
	msg = 'SmartInvoice test'
	from_email = settings.EMAIL_HOST_USER
	subject = 'evento test'
	currentuser = request.user
	"""
	
	if ajax_form is not None:
	#	#Assign task to DjangoQ
	#	#schedule('django.core.mail.send_mail', subject, msg, from_email, [currentuser.email], fail_silently=False, name=titolo, schedule_type=Schedule.ONCE, next_run=timezone.now() + timedelta(minutes=1), cluster='DjangORMrecur')
	#	#schedule('todo.views.new_recur_single_customer', id_cliente, name=id_cliente, schedule_type=Schedule.ONCE, next_run=aware_data_avvio, cluster='DjangORMrecur')
		new_recur_single_customer(id_cliente)
		
	return render(request, 'todo/recur.html')
	
