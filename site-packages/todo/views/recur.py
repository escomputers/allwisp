from django.shortcuts import render, get_object_or_404, redirect
from django.http import HttpResponse, Http404, HttpRequest
from django.contrib import messages

from datetime import datetime, timedelta
from dateutil import relativedelta

import time, json
from django.http import JsonResponse, HttpResponse, HttpResponseRedirect
from django.conf import settings
from django.template.loader import get_template, render_to_string
from django.contrib.auth.decorators import login_required, user_passes_test
from todo.utils import staff_check

from django.core.serializers import serialize
from django.forms.models import model_to_dict
from django.urls import reverse
from django.utils import timezone
from django.core.cache import cache

from django_q.models import Schedule, Task
from django_q.tasks import schedule, Schedule

from apps.customer.models import Customer
from apps.documents.models import Proforma, Expense, ProformaItem
from apps.azienda.models import Azienda

def numerazione_fatture_ricorrenti():
	#FUNZIONE NUMERAZIONE FATTURE RICORRENTI    
	try:
		#anno corrente
		anno_corrente = datetime.now().year
		
		ultima_fatt = Proforma.objects.latest('id')

		#prendi solo anno dal numero dell'ultima fattura
		anno_fatt = int(str(ultima_fatt.proforma_nr_prog).split('-')[1])
		
		#se l'ultima fattura e' vecchia
		if anno_fatt != anno_corrente:
			numero_prog = '1-' + str(anno_corrente) + '-R'
			
		#se invece e' di quest'anno
		else:
			#prendi solo id dal numero fattura e incrementa di una unita'
			id_fatt = int(str(ultima_fatt.proforma_nr_prog).split('-')[0])
			numero_prog = str(id_fatt + 1) + '-' + str(anno_corrente) + '-R'
		
	except Proforma.DoesNotExist:
		numero_prog = '1-' + str(anno_corrente) + '-R'
	
	return numero_prog


def add_items(proforma_vuota_id, pagamento_anticipato, cadenza_cliente, servizio_primario, descr_servizio_primario, prezzo_servizio_primario, 
	data_oggi, data_fatturazione):
			
	proforma = get_object_or_404(Proforma, pk=proforma_vuota_id)
	
	str_data_oggi = datetime.strftime(data_oggi, '%Y-%m-%d')
	
	#date righe proforma se pagamento anticipato
	if pagamento_anticipato:
		data_fine = (data_oggi + relativedelta.relativedelta(months=cadenza_cliente)).date()
		str_data_fine = datetime.strftime(data_fine, '%Y-%m-%d')
		
		descrizione = descr_servizio_primario + ' dal ' + str_data_oggi + ' al ' + str_data_fine
	
	#se posticipato
	else:
		str_data_fatt = datetime.strftime(data_fatturazione, '%Y-%m-%d')
		
		descrizione = descr_servizio_primario + ' dal ' + str_data_fatt + ' al ' + str_data_oggi
	
	#salva
	i = proforma.proformaitem_set.create(name=servizio_primario, description=descrizione,
	cost=prezzo_servizio_primario*cadenza_cliente, qty=1
	)
	i.save()
	

def add_first_items(proforma_vuota_id, importo_agg_prima_fatt, pagamento_anticipato, cadenza_cliente,
			servizio_primario, descr_servizio_primario, prezzo_servizio_primario, 
			data_fatturazione, data_att, richiesta_calcolo_iniziale):
			
	proforma = get_object_or_404(Proforma, pk=proforma_vuota_id)
	
	#importo prima fattura per canoni posticipati  
	if pagamento_anticipato is None:
		i = proforma.proformaitem_set.create(
		name=servizio_primario, 
		description=descr_servizio_primario + ' dal ' + 
		str(data_att.date()) + ' al ' + str(data_fatturazione.date()),
		cost=importo_agg_prima_fatt, qty=1
		)
		i.save()
	
	#aggiungi importi se pagamento anticipato, in base a cadenza cliente    
	else:
		i = proforma.proformaitem_set.create(
		name=servizio_primario, 
		description=descr_servizio_primario + ' dal ' + 
		str(data_fatturazione.date()) + ' al ' + str((data_fatturazione + relativedelta.relativedelta(months=cadenza_cliente)).date()),
		cost=prezzo_servizio_primario*cadenza_cliente, qty=1
		)
		i.save()
		
		#aggiungi importo aggiuntivo per canoni anticipati , se richiesto
		if richiesta_calcolo_iniziale: 
			i = proforma.proformaitem_set.create(
			name=servizio_primario, 
			description=descr_servizio_primario + ' dal ' + 
			str(data_att.date()) + ' al ' + str(data_fatturazione.date()),
			cost=importo_agg_prima_fatt, qty=1
			)
			i.save()
		
def crea_prima_proforma_cliente(id_cliente):
	#PRENDI DATI DEL CLIENTE PER FATTURA
	cliente = get_object_or_404(Customer, pk=id_cliente)

	numero_prog = numerazione_fatture_ricorrenti()

	#E' IMPOSTATO UN GIORNO DI FATTURAZIONE NELLE IMPOSTAZIONI AZIENDA?
	dati_azienda = get_object_or_404(Azienda, pk=1)
	
	#intesa come ogni giorno X
	giorno_cadenza_fatturazione = dati_azienda.giorno_cadenza_fatturazione
	
	if giorno_cadenza_fatturazione is not None:
	
		#data attivazione contratto
		str_data_att = str(cliente.data_inizio_contratto)
		data_att = datetime.strptime(str_data_att, '%Y-%m-%d')

		#cadenza pagamento cliente
		cadenza_cliente = cliente.cadenza_pagamento
		
		#tipo pagamento cliente
		pagamento_anticipato = cliente.pagamento_anticipato
		
		#servizio primario cliente
		servizio_primario = cliente.offerta_internet.nomeofferta
		
		#descrizione servizio primario cliente
		descr_servizio_primario = cliente.offerta_internet.descrizione
		
		#prezzo servizio primario cliente
		prezzo_servizio_primario = cliente.offerta_internet.prezzo
		
		#giorno di fatturazione in base alla data di attivazione del cliente
		giorno_data_fatturazione = (data_att + relativedelta.relativedelta(months=cadenza_cliente)).day
		
		#SE I GIORNI NON COINCIDONO, CALCOLA PRIMA DATA DI FATTURAZIONE IN BASE ALLA CADENZA AZIENDALE
		if giorno_data_fatturazione != giorno_cadenza_fatturazione:
			data_fatturazione = (data_att + relativedelta.relativedelta(months=cadenza_cliente)).replace(day=giorno_cadenza_fatturazione)
			
			#richiesta calcolo iniziale (se pagamento anticipato)
			richiesta_calcolo_iniziale = cliente.richiesta_calcolo_iniziale
			
			#CALCOLO PARAMETRO IMPORTO AGGIUNTIVO
			diff_giorni = (data_fatturazione - data_att).days
			importo_agg_prima_fatt = ((prezzo_servizio_primario/30) * diff_giorni)
			
			#CREA PRIMA FATTURA VUOTA SENZA RIGHE
			proforma = Proforma(customer=cliente, proforma_nr_prog=numero_prog)
			proforma.save()
			
			proforma_vuota_id = (Proforma.objects.filter(customer=id_cliente).latest('id')).id
			
			#aggiungi righe fattura
			add_first_items(proforma_vuota_id, importo_agg_prima_fatt, pagamento_anticipato,
			cadenza_cliente, servizio_primario, descr_servizio_primario, prezzo_servizio_primario, 
			data_fatturazione, data_att, richiesta_calcolo_iniziale
			)
			
			instanza_proforma = Proforma(pk=proforma_vuota_id)
			
			#calcola il totale di tutti gli items della proforma
			totale_proforma = instanza_proforma.total_items()
			
			instanza_proforma.totale = totale_proforma
			instanza_proforma.date = data_fatturazione
			
			#salve il totale e la data della proforma nel database
			instanza_proforma.save(update_fields=['totale', 'date'])
			
			#CREA IL RESTO DEGLI SCHEDULES FINO A DATA FINE CONTRATTO IN BASE ALLA CADENZA DI PAGAMENTO
			
			#durata del contratto per il servizio primario
			#durata_contratto = cliente.
			durata_contr = 24
			
			aware_data_fatturazione = timezone.make_aware(data_fatturazione)
			crea_fatture_ricorrenti(id_cliente, data_fatturazione)
			if cadenza_cliente == 1:
				for i in range(1, durata_contr + 1):
					aware_data_fatturazione = aware_data_fatturazione + relativedelta.relativedelta(months=1)
					
					#assign tasks to django q
					schedule('todo.views.crea_fatture_ricorrenti', id_cliente, data_fatturazione,
					schedule_type=Schedule.ONCE, next_run=aware_data_fatturazione, cluster='DjangORMrecur'
					)
					
			if cadenza_cliente == 2:
				durata_contratto = int(durata_contr/2) + 1
				for i in range(1, durata_contratto):
					aware_data_fatturazione = aware_data_fatturazione + relativedelta.relativedelta(months=2)

					#assign tasks to django q
					schedule('todo.views.crea_fatture_ricorrenti', id_cliente, data_fatturazione,
					schedule_type=Schedule.ONCE, next_run=aware_data_fatturazione, cluster='DjangORMrecur'
					)
					
			
		#DA FARE
		else:
			data_fatturazione = data_att + relativedelta.relativedelta(months=cadenza_cliente)
	 

def crea_fatture_ricorrenti(id_cliente, data_fatturazione):
	#PRENDI DATI DEL CLIENTE PER FATTURA
	cliente = get_object_or_404(Customer, pk=id_cliente)

	numero_prog = numerazione_fatture_ricorrenti()

	#CREA FATTURA VUOTA SENZA RIGHE
	proforma = Proforma(customer=cliente, proforma_nr_prog=numero_prog)
	proforma.save()
	
	proforma_vuota_id = (Proforma.objects.filter(customer=id_cliente).latest('id')).id
	
	#cadenza pagamento cliente
	cadenza_cliente = cliente.cadenza_pagamento
	
	#tipo pagamento cliente
	pagamento_anticipato = cliente.pagamento_anticipato
	
	#servizio primario cliente
	servizio_primario = cliente.offerta_internet.nomeofferta
	
	#descrizione servizio primario cliente
	descr_servizio_primario = cliente.offerta_internet.descrizione
	
	#prezzo servizio primario cliente
	prezzo_servizio_primario = cliente.offerta_internet.prezzo
	
	#data oggi
	data_oggi = datetime.now()
		
	#aggiungi righe fattura
	add_items(proforma_vuota_id, pagamento_anticipato, cadenza_cliente,
	servizio_primario, descr_servizio_primario, prezzo_servizio_primario, data_oggi,
	data_fatturazione
	)
	
	instanza_proforma = Proforma(pk=proforma_vuota_id)
			
	#calcola il totale di tutti gli items della proforma
	totale_proforma = instanza_proforma.total_items()
	
	instanza_proforma.totale = totale_proforma
	instanza_proforma.date = data_oggi
	
	#salve il totale e la data della proforma nel database
	instanza_proforma.save(update_fields=['totale', 'date'])
	
@login_required
@user_passes_test(staff_check)
def recur_form(request):
	#richiesta creazione ricorrenza da HTML via Ajax NELLA PAGINA NUOVO_CLIENTE
	ajax_form = json.loads(request.POST['data']) 
	id_cliente = ajax_form.get('customer')	
	
	#PRENDI I DATI DEL CLIENTE
	cliente = get_object_or_404(Customer, pk=id_cliente)

	#E' IMPOSTATO UN GIORNO DI FATTURAZIONE NELLE IMPOSTAZIONI AZIENDA?
	dati_azienda = get_object_or_404(Azienda, pk=1)
	
	#intesa come ogni giorno X
	giorno_cadenza_fatturazione = dati_azienda.giorno_cadenza_fatturazione
	
	if giorno_cadenza_fatturazione is not None:
	
		#data attivazione contratto
		str_data_att = str(cliente.data_inizio_contratto)
		data_att = datetime.strptime(str_data_att, '%Y-%m-%d')

		#cadenza pagamento cliente
		cadenza_cliente = cliente.cadenza_pagamento
		
		#giorno di fatturazione in base alla data di attivazione del cliente
		giorno_data_fatturazione = (data_att + relativedelta.relativedelta(months=cadenza_cliente)).day
		
		#SE I GIORNI NON COINCIDONO, CALCOLA PRIMA DATA DI FATTURAZIONE IN BASE ALLA CADENZA AZIENDALE
		if giorno_data_fatturazione != giorno_cadenza_fatturazione:
			data_fatturazione = (data_att + relativedelta.relativedelta(months=cadenza_cliente)).replace(day=giorno_cadenza_fatturazione)
		else:
			data_fatturazione = data_att + relativedelta.relativedelta(months=cadenza_cliente)
				
	if ajax_form is not None:
			
		#CREA SCHEDULE PER LA PRIMA DATA DI FATTURAZIONE
		schedule('todo.views.crea_prima_proforma_cliente', id_cliente, 
		schedule_type=Schedule.ONCE, next_run=timezone.make_aware(data_fatturazione), cluster='DjangORMrecur'
		)
		
		
	return render(request, 'todo/recur.html')

  
"""
#APPUNTI
def delete_item(proformaitem_id, proforma_id):
	item = get_object_or_404(ProformaItem, pk=proformaitem_id)
	proforma = get_object_or_404(Proforma, pk=proforma_id)
	item.delete()	
	
def add_proforma_expense(proforma_id):
	proforma = get_object_or_404(Proforma, pk=proforma_id)
	e = proforma.expense_set.create(description='spese incasso', cost=4.10, qty=1)
	e.save()	
	
def delete_proforma_expense(expense_id, proforma_id):
	expense = get_object_or_404(Expense, pk=expense_id)
	proforma = get_object_or_404(Proforma, pk=proforma_id)
	expense.delete()
"""

@login_required
@user_passes_test(staff_check)
def recur(request):
	try:
		customers = Customer.objects.all() 
		
		#tipi_doc = 
		
		try:
			tasks_pending = Schedule.objects.filter(cluster='DjangORMrecur')
			tasks_success = Task.objects.filter(success='1')
			#for i in tasks_pending:
			#   print(i.next_run)
		except Schedule.DoesNotExist:
			tasks_pending = None
			tasks_success = None
			
	except Customer.DoesNotExist:
		tasks_success = None
		tasks_pending = None
		customers = 'Nessun cliente'
	
	return render(request, 'todo/recur.html', context={'clienti': customers, 'tasks_pending': tasks_pending, 'tasks_success': tasks_success})