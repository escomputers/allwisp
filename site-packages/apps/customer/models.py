from __future__ import unicode_literals
import os
import datetime
from django import forms
from django.db import connections
from django.core.files.storage import FileSystemStorage
from django.db import models
from phonenumber_field.modelfields import PhoneNumberField
from phonenumber_field.widgets import PhoneNumberPrefixWidget
from apps.items.models import DocumentItem, offertainternet, cadenzapagamento, metodopagamento, offertavoip, offertaextra
from apps.documents.models import Document
from internationalflavor.vat_number import VATNumberField
from internationalflavor.iban import IBANField


class Customer (models.Model):
    CUSTOMER_STATUS = [
        ("ARC", "Archived"),
        ("ACT", "Active"),
        ("PRO", "Prospect"),
        ("LEA", "Lead"),
        ("DEF", "Defaulting"),
    ]
    
    customer_id = models.IntegerField(blank=False, default=None, unique=True)
    #stato_cliente_dato = models.CharField(max_length=128, blank=True, null=True)
    stato_cliente = models.CharField(max_length=3, blank=False, default=None, choices=CUSTOMER_STATUS)
    scelta_fattura = models.BooleanField(blank=True, null=True)
    recur = models.BooleanField(blank=True, null=True)
    ragionesociale = models.CharField(max_length=256, blank=False, default=None)
    piva = VATNumberField(max_length=256, blank=True, null=True)
    codiceunivoco_sdi = models.CharField(max_length=20, blank=True, null=True)
    codicefiscale = models.CharField(max_length=256, blank=True, null=True)
    indirizzo_res = models.CharField(max_length=256, blank=False, default=None)
    comune_res = models.CharField(max_length=256, blank=False, default=None)
    cap_res = models.CharField(max_length=256, blank=False, default=None)
    prov_res = models.CharField(max_length=256, blank=False, default=None)
    stato_res = models.CharField(max_length=3, blank=False, default=None)
    
    indirizzo_inst = models.CharField(max_length=256, blank=True, null=True)
    comune_inst = models.CharField(max_length=256, blank=True, null=True)
    cap_inst = models.CharField(max_length=256, blank=True, null=True)
    prov_inst = models.CharField(max_length=256, blank=True, null=True)
    recapito_tel = PhoneNumberField(blank=False, default=None)
    fax = PhoneNumberField(blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    pec = models.EmailField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    coordinate_gps = models.CharField(max_length=512, blank=True, null=True)
    
    
    

    
    offerta_internet = models.ForeignKey(offertainternet, on_delete=models.CASCADE,blank=True, null=True,  related_name="tags") 
    metodo_pagamento = models.ForeignKey(metodopagamento, on_delete=models.CASCADE, blank=True, null=True,  related_name="tags") 
    importo_attivazione = models.FloatField(blank=True, null=True)
    importo_offerta_dedicata = models.FloatField(blank=True,null=True)
    codice_iban = IBANField(blank=True, null=True)
    spese_invio_bolletta = models.FloatField(blank=True,null=True)
    offerta_voip =models.ForeignKey(offertavoip, on_delete=models.CASCADE,blank=True,  null=True,  related_name="tags")
    offerta_extra =models.ForeignKey(offertaextra, on_delete=models.CASCADE,blank=True,  null=True,  related_name="tags")
    #numero_voip =numero_voip =PhoneNumberField(blank=True, null=True)
    nodo = models.CharField(max_length=128, blank=True, null=True)
    ip_statico = models.GenericIPAddressField(blank=True, null=True)
    mac_adress = models.CharField(max_length=128, blank=True, null=True)
    data_installazione=models.DateField(blank=True, null=True)
    data_inizio_contratto=models.DateField(blank=True, null=True)
    data_contattato=models.DateField(blank=True, null=True)
    data_contattare_stabilito_cliente=models.DateField(blank=True, null=True)
    data_da_contattare=models.DateField(blank=True, null=True)
    
    #modifica per app recur
    cadenza_pagamento = models.ForeignKey(cadenzapagamento, on_delete=models.CASCADE, blank=True, null=True,  related_name="tags") 
    pagamento_anticipato = models.BooleanField(blank=True, null=True)
    richiesta_calcolo_iniziale = models.BooleanField(blank=True, null=True)

    def __str__(self):
        return self.ragionesociale
    
    def documents(self):
        return Document.objects.filter(customer=self).count()

