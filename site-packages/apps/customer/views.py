from django.http import JsonResponse,HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render, redirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required
import datetime
from django.core.files.storage import FileSystemStorage
import json, os
from django.contrib.auth.decorators import login_required, user_passes_test
from django.forms.models import model_to_dict
from forms import clientiForm,offertainternetForm, cadenzapagamentoform, metodopagamento, offertavoipForm, interessatiForm
from .models import Customer
from apps.items.models import InvoiceItem,InvoiceItem, offertainternet, cadenzapagamento, metodopagamento
from apps.invoices.models import Invoice
from django.views.generic.edit import UpdateView


#new customer
@login_required(login_url='login/')
def nuovocliente(request):
	clienti=clientiForm(request.POST)
	interessato=interessatiForm(request.POST)
	try:
		ultimoidclienti=Customer.objects.latest('id')
		print(ultimoidclienti)
		print(type(ultimoidclienti))
	except Customer.DoesNotExist:
		ultimoidclienti="nessun id"
	if clienti.is_valid():
		clienti.save()
		return redirect('customer_list')
	if interessato.is_valid():
		interessato.save()
		return redirect('customer_list')
	context={"clienti":clienti, "interessato":interessato, 'ultimoid':ultimoidclienti}	
	return render(request, 'nuovocliente.html',context=context)

	
# Create your views here.
# List all customers
@login_required(login_url='login/')
def customer_list(request):
	customers = Customer.objects.all()
	ultimoid=Customer.objects.latest('id','customer_id')
	context = {
		'title' : 'Lista clienti',
		'customers' : customers,
		'ultimoid' : ultimoid,
	}
	return render(request, 'customers.html', context)



# Update customer

def update_customer(request, ragionesociale):
		custom = Customer.objects.get(pk=ragionesociale)
		if request.method == "POST":
			clienti=clientiForm(request.POST, instance=custom)
			if clienti.is_valid():
				customer = clienti.save(commit=False)
				customer.save()
				return render( request, 'customer.html', context={'clienti': clienti, 'clientenome':custom})
				#return HttpResponseRedirect(reverse('update', args=(custom.ragionesociale,)))
		else:
			clienti=clientiForm( instance=custom )	
		return render( request, 'customer.html', context={'clienti': clienti, 'clientenome':custom})
            


# Delete customer
@login_required(login_url='login/')
def delete_customer(request, ragionesociale):
	customer = get_object_or_404(Customer, pk=ragionesociale)
	customer.delete()
	return HttpResponseRedirect(reverse('customer_list'))


# Delete customer
@login_required(login_url='login/')
def archivia_customer(request, ragionesociale):
	customer = get_object_or_404(Customer, pk=ragionesociale)
	customer.stato_cliente_dato="archiviato"
	customer.save()
	return HttpResponseRedirect(reverse('customer_list'))
	

