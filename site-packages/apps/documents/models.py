from __future__ import unicode_literals
from django.db import models
from django.db import connections
from django.core.files.storage import FileSystemStorage
from django.db import models


class Nota_di_credito(models.Model):
	document_id=models.CharField(max_length=200, blank=True, null=True)
	customer = models.ForeignKey('customer.Customer', on_delete=models.CASCADE)
	fattura_riferimento = models.ForeignKey('Document', on_delete=models.CASCADE)
	date = models.DateField(blank=True, null=True)
	status = models.CharField(max_length=10,blank=True, null=True)
	documento=models.CharField(max_length=20,blank=True, null=True)
	qta = models.CharField(max_length=128, blank=True, null=True)
	prodotto = models.CharField(max_length=128, blank=True, null=True)
	descrizione = models.TextField(blank=True, null=True)
	prezzo = models.DecimalField(decimal_places=2, max_digits=10,blank=True, null=True)
	prezzo_subtot = models.IntegerField(default=00.00,blank=True, null=True)
	tax = models.IntegerField(blank=True, null=True)
	total=models.IntegerField(default=00.00,blank=True, null=True)
	def __str__(self):
		return str(self.document_id)

class Document(models.Model):
	document_id=models.CharField(max_length=200, blank=True, null=True)
	pagamentofattura=models.DateField(blank=True, null=True)
	customer = models.ForeignKey('customer.Customer', on_delete=models.CASCADE)
	date = models.DateField(blank=True, null=True)
	status = models.CharField(max_length=10,blank=True, null=True)
	documento=models.CharField(max_length=20,blank=True, null=True)
	qta = models.CharField(max_length=128, blank=True, null=True)
	prodotto = models.CharField(max_length=128, blank=True, null=True)
	descrizione = models.TextField(blank=True, null=True)
	prezzo = models.DecimalField(decimal_places=2, max_digits=10,blank=True, null=True)
	prezzo_subtot = models.IntegerField(default=00.00,blank=True, null=True)
	tax = models.IntegerField(blank=True, null=True)
	total=models.IntegerField(default=00.00,blank=True, null=True)
	def __str__(self):
		return str(self.document_id)

class Preventivo(models.Model):
	document_id=models.CharField(max_length=200, blank=True, null=True)
	pagamentofattura=models.DateField(blank=True, null=True)
	customer = models.ForeignKey('customer.Customer', on_delete=models.CASCADE)
	date = models.DateField(blank=True, null=True)
	status = models.CharField(max_length=10,blank=True, null=True)
	documento=models.CharField(max_length=20,blank=True, null=True)
	qta = models.CharField(max_length=128, blank=True, null=True)
	prodotto = models.CharField(max_length=128, blank=True, null=True)
	descrizione = models.TextField(blank=True, null=True)
	prezzo = models.DecimalField(decimal_places=2, max_digits=10,blank=True, null=True)
	prezzo_subtot = models.IntegerField(default=00.00,blank=True, null=True)
	tax = models.IntegerField(blank=True, null=True)
	total=models.IntegerField(default=00.00,blank=True, null=True)
	def __str__(self):
		return str(self.document_id)

#modifica per app recur		
class Proforma(models.Model):
	proforma_nr_prog = models.CharField(max_length=256, blank=True, null=True)
	customer = models.ForeignKey('customer.Customer', on_delete=models.CASCADE)
	date = models.DateField(blank=True, null=True)
	status = models.CharField(max_length=10, blank=True, default='Unsent')
	totale = models.DecimalField(decimal_places=2, max_digits=16, blank=True, null=True)
	
	def __str__(self):
		return str(self.id)

	def total_items(self):
		total = 0
		items = self.proformaitem_set.all()

		for item in items:
			total += item.cost * item.qty

		return total

	def total_expenses(self):
		total = 0
		expenses = self.expense_set.all()

		for expense in expenses:
			total += expense.cost * expense.qty

		return total

	def total(self):
		items = self.total_items()
		expenses = self.total_expenses()

		return items - expenses
		
	def paid(self):
		return self.status == 'Paid'
		
	def unpaid(self):
		return self.status == 'Unpaid'
		
	def draft(self):
		return self.status == 'Draft'

class Expense(models.Model):
	description = models.TextField()
	cost = models.DecimalField(decimal_places=2, max_digits=16, blank=True, null=True)
	qty = models.IntegerField(blank=True, null=True)
	proforma = models.ForeignKey(Proforma, on_delete=models.CASCADE, blank=True, null=True)
	date = models.DateField(blank=True, null=True)
		
	def total(self):
		return self.cost * self.qty

	def is_business_expense(self):
		return self.proforma is None
		
class ProformaItem(models.Model):
	proforma = models.ForeignKey(Proforma, on_delete=models.CASCADE)
	name = models.CharField(max_length=128, blank=True, null=True)
	description = models.TextField(blank=True, null=True)
	iva = models.IntegerField(blank=True, null=True)
	cost = models.DecimalField(decimal_places=2, max_digits=16, blank=True, null=True)
	qty = models.IntegerField(blank=True, null=True)
	

	def total(self):
		#importo_iva = (self.cost * self.qty) * iva) / 100
		return self.cost * self.qty