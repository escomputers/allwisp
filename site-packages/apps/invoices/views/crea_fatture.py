from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render,redirect
from django.urls import reverse
from django.core.files.storage import FileSystemStorage
from django.contrib.auth.decorators import login_required
import datetime
from django.contrib import messages
from django.forms import formset_factory,modelformset_factory
from apps.customer.models import Customer
from apps.expenses.models import Expense
from apps.items.models import InvoiceItem
from dateutil.relativedelta import *
from django.db.models import Sum
from django.db.models import Q #per fare le condiazioni logiche and, or,xor ecc...
from ..models import Invoice,  Preventivo, Nota_di_credito,prodotti
from forms import offertainternetForm,visualizza_prodotti,cadenzapagamentoform, metodopagamento, offertavoipForm,prodotti_preventivoForm,nota_di_creditoForm,prodottiFormset
from django.forms import inlineformset_factory


def ricercainvociecliente(request):
	if request.is_ajax():
		ragionesociale = request.POST.get("ragionesociale")
		date_escluse = datetime.date.today() - relativedelta(years=10)
		datadioggi=datetime.date.today()
		clienti=Customer.objects.get(pk=ragionesociale)
		clienti_invoice=Invoice.objects.filter(customer=clienti).values('invoice_id')

		response={'customer_invoice':list(clienti_invoice)}
		return JsonResponse(response)
#il comando get porta soltanto in un unico query, filter invece si usa per più query .values è importante 
#alla fine del filtraggio quando si ha una moltitudine di oggetti. 
#Si avrà una tupla, mentre json ha bisogno di lista, quindi il query set si deve trasformare in lista 








# Create new invoice
@login_required(login_url='login/')
def new_invoice(request):

	# If no customer_id is defined, create a new invoice
	if request.method  == 'POST':
		ragionesociale = request.POST["ragionesociale"]
		tipo_documento=request.POST["documento"]
		fatturariferimento=request.POST["selezionafattura"]
		if ragionesociale =='None':
			customers = Customer.objects.order_by('ragionesociale')
			context = {
				'title' : 'Nuova fattura',
				'customer_list' : customers,
				'message' : 'Seleziona un cliente',
				}
			return render(request, 'new_invoice.html', context)
		else:
			if fatturariferimento=='s':
				fatturariferimento=='e'

			customer = get_object_or_404(Customer, pk=ragionesociale)
			idcliente=customer.customer_id
			idclientestr=str(idcliente)
			linkviewsdocumenti_fiscali=idclientestr+"?"+tipo_documento+'?'+fatturariferimento

			return HttpResponseRedirect(reverse('invoice', args=[linkviewsdocumenti_fiscali]))
			
	else:
		# Customer list needed to populate select field
		customers = Customer.objects.order_by('ragionesociale').exclude(ragionesociale="cliente di controllo")
		context = {
			'title' : 'New Invoice',
			'customer_list' : customers,
		}
		return render(request, 'new_invoice.html', context)
