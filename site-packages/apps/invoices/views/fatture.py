from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render,redirect
from django.urls import reverse
from django.core.files.storage import FileSystemStorage
from django.contrib.auth.decorators import login_required
import datetime
from django.contrib import messages
from django.forms import formset_factory,modelformset_factory
from apps.customer.models import Customer
from apps.expenses.models import Expense
from apps.items.models import InvoiceItem
from dateutil.relativedelta import *
from django.db.models import Sum
from django.db.models import Q #per fare le condiazioni logiche and, or,xor ecc...
from ..models import Invoice,  Preventivo, Nota_di_credito,prodotti,prodottipreventivo
from forms import offertainternetForm,visualizza_prodotti,prodottiFormsetpreventivo,cadenzapagamentoform, metodopagamento, offertavoipForm,prodotti_preventivoForm,nota_di_creditoForm,prodottiFormset
from django.forms import inlineformset_factory



@login_required
def invoice(request, linkviewsdocumenti_fiscali):
	
			dataoggi=datetime.date.today()
			idclientestr=linkviewsdocumenti_fiscali.split('?')[0]
			customer_id=int(idclientestr)
			tipo_documento=linkviewsdocumenti_fiscali.split('?')[1]
			customer = get_object_or_404(Customer, customer_id=customer_id)
			anno_corrente = dataoggi.year
			anno_corrente_stringa = str(anno_corrente)
			if tipo_documento == 'preventivo':
				nome_documento='Preventivo'
				status='preventivo'
				try:
					id_dal_databse=Preventivo.objects.latest('preventivo_id')
					id_ultimo=id_dal_databse.preventivo_id
					id_solo_serie=id_ultimo.split('-')[0]
					id_integer=int(id_solo_serie)
					idincremento=id_integer+1
					#estrazione solo anno inserito
					anno_inserito=id_ultimo.split('-')[1]
					if anno_corrente_stringa == anno_inserito:
						preventivo_id=str(idincremento) +'-' + anno_corrente_stringa
					else:
						preventivo_id=str(1)+ '-' + anno_corrente_stringa
				
				except Preventivo.DoesNotExist:
					preventivo_id=str(1) + '-' + anno_corrente_stringa
				
				if request.method=='GET':
						preventivo =  Preventivo( preventivo_id=preventivo_id, customer=customer, date=dataoggi,status=status)
						formsetpreventivo = prodottiFormsetpreventivo()
						context = {
							'title' : 'Preventivo ' + preventivo_id,
							'invoice':preventivo,
							'documento':nome_documento,
							'formset':formsetpreventivo,
							'message':'dati salvati correttamente',
							}
						
						return render(request, 'preventivo.html', context)
				


				elif  request.method == 'POST':
						formsetpreventivo=prodottiFormsetpreventivo(request.POST)
						copia_form_preventivo=request.POST.copy()
						scadenza_fattura1=copia_form_preventivo.get("scadenza_fattura")
						altri_oneri1=copia_form_preventivo.get("altri_oneri")
						descrizione_altri_oneri1=copia_form_preventivo.get("descrizione_altri_oneri")
						spese_spedizione1=copia_form_preventivo.get("spese_spedizione")
						totale_fattura_tasse_escluse1=copia_form_preventivo.get("totale_fattura_tasse_escluse")
						totale_iva_fattura1=copia_form_preventivo.get("totale_iva_fattura")
						totale_sconto_applicato_fattura1=copia_form_preventivo.get("totale_sconto_applicato_fattura")
						totale_fattura1=copia_form_preventivo.get("totale_fattura")
						note1=copia_form_preventivo.get('note')

						preventivo=Preventivo(preventivo_id=preventivo_id,customer=customer, date=dataoggi,status=status, 
						 altri_oneri=altri_oneri1,scadenza_preventivo=scadenza_fattura1,
						descrizione_altri_oneri=descrizione_altri_oneri1,spese_spedizione=spese_spedizione1, totale_fattura_tasse_escluse=totale_fattura_tasse_escluse1, 
						totale_iva_fattura=totale_iva_fattura1,totale_sconto_applicato_fattura=totale_sconto_applicato_fattura1, 
						totale_fattura=totale_fattura1,note=note1)
					
						preventivo.save()
						b=Preventivo.objects.get(preventivo_id=preventivo_id)
						formset=prodottiFormsetpreventivo(request.POST, instance=b)
						if formset.is_valid():
							formset.save()

							context = {
							'title' : 'Invoice ' + preventivo_id,
							'invoice' : preventivo,
							'message':'dati salvati correttamente',
							'formset':prodottiFormsetpreventivo,
							'documento':nome_documento,
							}
							nomecliente=customer.ragionesociale
							document_legal='Preventivo'+ '_' + preventivo_id + '_' + nomecliente
					
							return HttpResponseRedirect(reverse('success_document_legal', args=[document_legal]))
							
							
						else:
							#context di errore nel salvataggio formset
							context = {
							'title' : 'Invoice ' + preventivo_id,
							'invoice' : preventivo,
							'message':'dati salvati correttamente',
							'formset':formsetpreventivo
							}
							document_legal='Preventivo'+ '_' + preventivo_id + '_' + nomecliente
					
							return HttpResponseRedirect(reverse('error_document_legal', args=[document_legal]))
					


					
			
				

			


			elif tipo_documento =='fattura':
				nome_documento='Fattura'
				try:
					id_dal_databse=Invoice.objects.last()
					if id_dal_databse==None:
						invoice_id=str(1)+ '-' + anno_corrente_stringa
					else:
						id_ultimo=id_dal_databse.invoice_id
						id_solo_serie=id_ultimo.split('-')[0]
						id_integer=int(id_solo_serie)
						idincremento=id_integer+1
						#estrazione solo anno inserito
						anno_inserito=id_ultimo.split('-')[1]
						if anno_corrente_stringa == anno_inserito:
							invoice_id=str(idincremento) +'-' + anno_corrente_stringa
						else:
							invoice_id=str(1)+ '-' + anno_corrente_stringa
				
				except Invoice.DoesNotExist:
					invoice_id=str(1)+ '-' + anno_corrente_stringa
		
				print(invoice_id)


				if request.method == 'POST':
					formset=prodottiFormset(request.POST)
					copia_form_fattura=request.POST.copy()
					scadenza_fattura=copia_form_fattura.get("scadenza_fattura")
					giorni_pagamento_fattura=copia_form_fattura.get("giorni_pagamento_fattura")
					altri_oneri=copia_form_fattura.get("altri_oneri")
					descrizione_altri_oneri=copia_form_fattura.get("descrizione_altri_oneri")
					spese_spedizione=copia_form_fattura.get("spese_spedizione")
					totale_fattura_tasse_escluse=copia_form_fattura.get("totale_fattura_tasse_escluse")
					totale_iva_fattura=copia_form_fattura.get("totale_iva_fattura")
					totale_sconto_applicato_fattura=copia_form_fattura.get("totale_sconto_applicato_fattura")
					totale_fattura=copia_form_fattura.get("totale_fattura")
					status=copia_form_fattura.get('selezionapagamento')
					note=copia_form_fattura.get('note')
					if status !='non pagato':
						datapagamentofattura=dataoggi
					else:
						datapagamentofattura='non pagato'
						invoice = Invoice( invoice_id=invoice_id, customer=customer, date=dataoggi,status=status, datapagamentofattura=datapagamentofattura, scadenza_fattura=scadenza_fattura , 
						 giorni_pagamento_fattura=giorni_pagamento_fattura , altri_oneri=altri_oneri,
						descrizione_altri_oneri=descrizione_altri_oneri,spese_spedizione=spese_spedizione, totale_fattura_tasse_escluse=totale_fattura_tasse_escluse, 
						totale_iva_fattura=totale_iva_fattura,totale_sconto_applicato_fattura=totale_sconto_applicato_fattura, 
						totale_fattura=totale_fattura,note=note)
						# bisogna inserire questa condizione if form.is_valid():
						invoice.save()

						a=Invoice.objects.get(invoice_id=invoice_id)
						formset=prodottiFormset(request.POST, instance=a)

					
					if formset.is_valid():
						formset.save()
						context = {
						'title' : 'Invoice ' + invoice_id,
						'invoice' : invoice,
						'documento':nome_documento,
						'formset':formset,
						'message':'dati salvati correttamente',
						}
						nomecliente=customer.ragionesociale
						document_legal='fattura'+ '_' + invoice_id + '_' + nomecliente
						
						return HttpResponseRedirect(reverse('success_document_legal', args=[document_legal]))

					

					else:
						context = {
						'title' : 'Invoice ' + invoice_id,
						'invoice' : invoice,
						
						'formset':formset,
						'message':'dati non salvati correttamente',
						}
						nomecliente=customer.ragionesociale
						document_legal='fattura'+ '_' + invoice_id + '_' + nomecliente
						
						return HttpResponseRedirect(reverse('error_document_legal', args=[document_legal]))
						


	
					
				elif request.method == 'GET':

					invoice =  Invoice( invoice_id=invoice_id, customer=customer, date=dataoggi)
					formset = prodottiFormset()
					context = {
							'title' : 'Invoice ' + invoice_id,
							'invoice':invoice,
							'documento':nome_documento,
							'formset':formset,
							'message':'dati salvati correttamente',
							}
						
					return render(request, 'invoice.html', context)




			elif tipo_documento =='nota_di_credito':
				nome_documento='Nota di credito'
				status='annullamento fattura n.'
				fattura_riferimento_url=linkviewsdocumenti_fiscali.split('?')[2]
				fattura_riferimento=str(fattura_riferimento_url)

				if request.method=='GET':
					try:
						id_dal_databse=Invoice.objects.latest("invoice_id")
						id_ultimo=id_dal_databse.invoice_id
						id_solo_serie=id_ultimo.split('-')[0]
						id_integer=int(id_solo_serie)
						idincremento=id_integer+1
						#estrazione solo anno inserito
						anno_inserito=id_ultimo.split('-')[1]
						if anno_corrente_stringa == anno_inserito:
							invoice_id=str(idincremento) +'-' + anno_corrente_stringa
						else:
							invoice_id=str(1)+ '-' + anno_corrente_stringa
					
					except Invoice.DoesNotExist:		
							return HttpResponseRedirect(reverse('new_invoice'))
					
					
					
					

					a=Invoice.objects.get(invoice_id=fattura_riferimento)
					prodottivisualizzati_Formset=inlineformset_factory(Invoice, prodotti, form=visualizza_prodotti, extra=0)#per ilformset

					formset=prodottivisualizzati_Formset(instance=a)
					invoice =  Nota_di_credito(invoice=a, date=dataoggi,status=status,nota_id=invoice_id)
					

					context = {
					'title' : 'nota di credito ' + invoice_id,
					'invoice' : invoice,
					'nome_documento':'Nota di credito',
					'message':'dati salvati correttamente',
					'formset':formset
					}
					
					return render(request, 'nota_di_credito.html', context)

				elif request.method=='POST':
					try:
						id_dal_databse=Invoice.objects.latest("invoice_id")
						id_ultimo=id_dal_databse.invoice_id
						id_solo_serie=id_ultimo.split('-')[0]
						id_integer=int(id_solo_serie)
						idincremento=id_integer+1
						#estrazione solo anno inserito
						anno_inserito=id_ultimo.split('-')[1]
						if anno_corrente_stringa == anno_inserito:
							invoice_id=str(idincremento) +'-' + anno_corrente_stringa
						else:
							invoice_id=str(1)+ '-' + anno_corrente_stringa
					
					except Invoice.DoesNotExist:		
							return HttpResponseRedirect(reverse('new_invoice'))
						
					note = request.POST["note"]
					descrizione_altri_motivi=request.POST["descrizione_altri_motivi"]
						
					
					a=Invoice.objects.get(invoice_id=fattura_riferimento)
					prodottivisualizzati_Formset=inlineformset_factory(Invoice, prodotti, form=visualizza_prodotti, extra=0)#per ilformset

					formset=prodottivisualizzati_Formset(instance=a)



					invoice =  Nota_di_credito(invoice=a, date=dataoggi,status=status,note=note,eventuali_motivi=descrizione_altri_motivi, nota_id=invoice_id)
					invoice.save()
					a.Nota_di_credito='1'
					a.save()
					cliente_fittizio=Customer.objects.get(customer_id=2)
					inserimento_solo_nuovo_id=Invoice(invoice_id=invoice_id,customer=cliente_fittizio)
					inserimento_solo_nuovo_id.save()
					context = {
					'title' : 'nota di credito ' + invoice_id,
					'invoice' : invoice,
					'nome_documento':'Nota di credito',
					'message':'dati salvati correttamente',
					'formset':formset
					}
					
					return render(request, 'nota_di_credito.html', context)

						
@login_required
def success_legal_document(request,document_legal):
	tipodocumento=document_legal.split('_')[0]
	numerofattura=document_legal.split('_')[1]
	nomecliente=document_legal.split('_')[2]

	context={'nomecliente':nomecliente,'tipodocumento':tipodocumento,'numerofattura':numerofattura }

	return render(request, 'successo_document_legal.html', context)
@login_required
def error_legal_document(request,document_legal):
	tipodocumento=document_legal.split('_')[0]
	numerofattura=document_legal.split('_')[1]
	nomecliente=document_legal.split('_')[2]

	context={'nomecliente':nomecliente,'tipodocumento':tipodocumento,'numerofattura':numerofattura }

	return render(request, 'problem_legal_document.html', context)


@login_required
# Dettagli fattura
def view_invoice(request, invoice_id):
		invoice = get_object_or_404(Invoice, invoice_id=invoice_id)
		prodottivisualizzati_Formset=inlineformset_factory(Invoice, prodotti, form=visualizza_prodotti, extra=0)
		formset=prodottivisualizzati_Formset(instance=invoice)
		

		if request.method == "POST":
			data_pagamento_fattura=request.POST['data_pagamento_fattura']
			cambio_status=request.POST['status']
			if data_pagamento_fattura =='':
				data_pagamento_fattura ='ancora da saldare'
			if cambio_status =='':
				cambio_status='non pagato'
			invoice.data_pagamento_fattura_effettivo=data_pagamento_fattura
			invoice.status=cambio_status
			invoice.save()
			context = {
					'title' : 'Dettagli fattura ' + invoice_id,
					'invoice' : invoice,
					'nome_documento':'Dettagli fattura',
					'message':'dati salvati correttamente',
					'formset':formset
					}
			
			return render( request, 'dettagli_fattura.html', context)
			
		else:
			invoice = get_object_or_404(Invoice, invoice_id=invoice_id)
			prodottivisualizzati_Formset=inlineformset_factory(Invoice, prodotti, form=visualizza_prodotti, extra=0)
			formset=prodottivisualizzati_Formset(instance=invoice)
			context = {
					'title' : 'Dettagli fattura ' + invoice_id,
					'invoice' : invoice,
					'nome_documento':'Dettagli fattura',
					'formset':formset
					}
			return render( request, 'dettagli_fattura.html', context)




# Update invoice

@login_required
# Upload attachment for invoice
@login_required(login_url='login/')
def upload_invoice_attachment(request, invoice_id):
    myfile = request.FILES['file']
    invoice = get_object_or_404(Invoice, pk=invoice_id)

    fs = FileSystemStorage()
    fs.save(myfile.name, myfile)

    e = invoice.invoiceattachment_set.create(file=myfile, displayname=myfile.name)
    e.save()

    return HttpResponseRedirect(reverse('invoice', args=(invoice.id,)))


@login_required
# Delete attachment from invoice
@login_required(login_url='login/')
def delete_invoice_attachment(request, invoice_id, invoiceattachment_id):
	invoice = get_object_or_404(Invoice, pk=invoice_id)
	invoiceattachment = get_object_or_404(InvoiceAttachment, pk=invoiceattachment_id)
	try:
		invoiceattachment.delete()
		fs = FileSystemStorage()
		fs.delete(invoiceattachment)
	except:
		context = {
			'error_message' : "Unable to delete attachment!",
			'invoice_id' : invoice_id
		}
		return render(request, 'view_invoice.html', context)
	else:
		return HttpResponseRedirect(reverse('invoice', args=(invoice.id,)))
