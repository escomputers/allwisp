from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render,redirect
from django.urls import reverse
from django.core.files.storage import FileSystemStorage
from django.contrib.auth.decorators import login_required
import datetime
from django.contrib import messages
from django.forms import formset_factory,modelformset_factory
from apps.customer.models import Customer
from apps.expenses.models import Expense
from apps.items.models import InvoiceItem
from dateutil.relativedelta import *
from django.db.models import Sum
from django.db.models import Q #per fare le condiazioni logiche and, or,xor ecc...
from .models import Invoice,  Preventivo, Nota_di_credito,prodotti
from forms import offertainternetForm,visualizza_prodotti,cadenzapagamentoform, metodopagamento, offertavoipForm,prodotti_preventivoForm,nota_di_creditoForm,prodottiFormset
from django.forms import inlineformset_factory

def lista_nota_credito(request):
	lista=Nota_di_credito.objects.all().order_by('-date')
	
	ultimo=Nota_di_credito.objects.last()
	ultimoid=ultimo.invoice_id
	context={'lista':lista}
	return render(request, 'lista_nota_di_credito.html', context) 


def lista_fatture(request):
	lista=Invoice.objects.exclude(customer=2).order_by('-date')#da modificare in base al customer di controllo
	
	#fatture da riscuotere
	da_riscuotere=Invoice.objects.filter(status='non pagato').exclude(Nota_di_credito='1')
	print(da_riscuotere)
	soldi_da_ricevere=sum(da_riscuotere.values_list('totale_fattura', flat=True)) #per la somma di tutti icampi
	soldi_da_ricevere='{:0.2f}'.format(soldi_da_ricevere)#per renderelo soltanto a due decimali
	fatture_da_riscuotere=da_riscuotere.count()
	
	#fatture totale incassato
	soldi_riscossi=Invoice.objects.filter(Q(status='pagato') | Q(status='pagato contanti'))#con il Q serve per fare le comparazioni
	total_price = sum(soldi_riscossi.values_list('totale_fattura', flat=True)) #per la somma di tutti icampi
	total_price='{:0.2f}'.format(total_price)#per renderelo soltanto a due decimali
	
	#soldi da fatture scadute
	fatture_scadute=Invoice.objects.filter(status='scadute')
	soldi_fatture_scadute=sum(fatture_scadute.values_list('totale_fattura', flat=True)) #per la somma di tutti icampi
	soldi_fatture_scadute='{:0.2f}'.format(soldi_fatture_scadute)#per renderelo soltanto a due decimali




	ultimo=Invoice.objects.last()
	ultimoid=ultimo.invoice_id
	context={'lista':lista, 'ultimoid':ultimoid,
	'incassato':total_price, 'da_riscuotere':fatture_da_riscuotere,
	'fatture_scadute':fatture_scadute,'tot_fatture_scadute':soldi_fatture_scadute, 'soldi_da_ricevere':soldi_da_ricevere}
	return render(request, 'lista_fatture.html', context) 


def lista_preventivi(request):
	lista=preventivo.objects.all()
	ultimo=preventivo.objects.last()
	ultimoid=ultimo.invoice_id
	context={'lista':lista, 'ultimoid':ultimoid}
	return render(request, 'lista_preventivo.html', context) 



def ricercainvociecliente(request):
	if request.is_ajax():
		ragionesociale = request.POST.get("ragionesociale")
		date_escluse = datetime.date.today() - relativedelta(years=10)
		datadioggi=datetime.date.today()
		clienti=Customer.objects.get(pk=ragionesociale)
		clienti_invoice=Invoice.objects.filter(customer=clienti).values('invoice_id')

		response={'customer_invoice':list(clienti_invoice)}
		return JsonResponse(response)
#il comando get porta soltanto in un unico query, filter invece si usa per più query .values è importante 
#alla fine del filtraggio quando si ha una moltitudine di oggetti. 
#Si avrà una tupla, mentre json ha bisogno di lista, quindi il query set si deve trasformare in lista 








# Create new invoice
@login_required(login_url='login/')
def new_invoice(request):

	# If no customer_id is defined, create a new invoice
	if request.method  == 'POST':
		ragionesociale = request.POST["ragionesociale"]
		tipo_documento=request.POST["documento"]
		fatturariferimento=request.POST["selezionafattura"]
		if ragionesociale =='None':
			customers = Customer.objects.order_by('ragionesociale')
			context = {
				'title' : 'Nuova fattura',
				'customer_list' : customers,
				'message' : 'Seleziona un cliente',
				}
			return render(request, 'new_invoice.html', context)
		else:
			if fatturariferimento=='s':
				fatturariferimento=='e'

			customer = get_object_or_404(Customer, pk=ragionesociale)
			idcliente=customer.customer_id
			idclientestr=str(idcliente)
			linkviewsdocumenti_fiscali=idclientestr+"?"+tipo_documento+'?'+fatturariferimento

			return HttpResponseRedirect(reverse('invoice', args=[linkviewsdocumenti_fiscali]))
			
	else:
		# Customer list needed to populate select field
		customers = Customer.objects.order_by('ragionesociale').exclude(ragionesociale="cliente di controllo")
		context = {
			'title' : 'New Invoice',
			'customer_list' : customers,
		}
		return render(request, 'new_invoice.html', context)







@login_required
def invoice(request, linkviewsdocumenti_fiscali):
	
	#if request.method  == 'POST':
			dataoggi=datetime.date.today()
			idclientestr=linkviewsdocumenti_fiscali.split('?')[0]
			customer_id=int(idclientestr)
			tipo_documento=linkviewsdocumenti_fiscali.split('?')[1]
			customer = get_object_or_404(Customer, customer_id=customer_id)
			anno_corrente = dataoggi.year
			anno_corrente_stringa = str(anno_corrente)
			if tipo_documento == 'preventivo':
				nome_documento='Preventivo'
				status='preventivo'
				try:
					id_dal_databse=Preventivo.objects.latest('invoice_id')
					id_ultimo=id_dal_databse.invoice_id
					print(id_ultimo)
					id_solo_serie=id_ultimo.split('-')[0]
					id_integer=int(id_solo_serie)
					idincremento=id_integer+1
					#estrazione solo anno inserito
					anno_inserito=id_ultimo.split('-')[1]
					if anno_corrente_stringa == anno_inserito:
						invoice_id=str(idincremento) +'-' + anno_corrente_stringa
					else:
						invoice_id=str(1)+ '-' + anno_corrente_stringa
				
				except Preventivo.DoesNotExist:
					invoice_id=str(1) + '-' + anno_corrente_stringa
				
				invoice =  Preventivo( invoice_id=invoice_id, customer=customer, date=dataoggi,status=status, pagamentofattura=dataoggi, documento =nome_documento)
						
				try:
					
					invoice.save()


					context = {
					'title' : 'Invoice ' + invoice_id,
					'invoice' : invoice,
					'message':'dati salvati correttamente',
					}
					
					return render(request, 'invoice.html', context)

					
			
				except:
							context={
							'title' : 'Invoice ' + invoice_id,
							'invoice' : invoice,
							'message':'Errore, I prodotti del preventivo non sono stati correttamente salvati. Riprova',
							
							}
							return render(request, 'invoice.html', context)

			


			elif tipo_documento =='fattura':
				nome_documento='Fattura'
				try:
					id_dal_databse=Invoice.objects.last()
					if id_dal_databse==None:
						invoice_id=str(1)+ '-' + anno_corrente_stringa
					else:
						id_ultimo=id_dal_databse.invoice_id
						id_solo_serie=id_ultimo.split('-')[0]
						id_integer=int(id_solo_serie)
						idincremento=id_integer+1
						#estrazione solo anno inserito
						anno_inserito=id_ultimo.split('-')[1]
						if anno_corrente_stringa == anno_inserito:
							invoice_id=str(idincremento) +'-' + anno_corrente_stringa
						else:
							invoice_id=str(1)+ '-' + anno_corrente_stringa
				
				except Invoice.DoesNotExist:
					invoice_id=str(1)+ '-' + anno_corrente_stringa
		
				print(invoice_id)


				if request.method == 'POST':
					formset=prodottiFormset(request.POST)
					print('qua siamo su post')
					copia_form_fattura=request.POST.copy()
					scadenza_fattura=copia_form_fattura.get("scadenza_fattura")
					giorni_pagamento_fattura=copia_form_fattura.get("giorni_pagamento_fattura")
					altri_oneri=copia_form_fattura.get("altri_oneri")
					descrizione_altri_oneri=copia_form_fattura.get("descrizione_altri_oneri")
					spese_spedizione=copia_form_fattura.get("spese_spedizione")
					totale_fattura_tasse_escluse=copia_form_fattura.get("totale_fattura_tasse_escluse")
					totale_iva_fattura=copia_form_fattura.get("totale_iva_fattura")
					totale_sconto_applicato_fattura=copia_form_fattura.get("totale_sconto_applicato_fattura")
					totale_fattura=copia_form_fattura.get("totale_fattura")
					status=copia_form_fattura.get('selezionapagamento')
					print(status,'prova')
					if status !='non pagato':
						datapagamentofattura=dataoggi
					else:
						datapagamentofattura='non pagato'
					invoice = Invoice( invoice_id=invoice_id, customer=customer, date=dataoggi,status=status, datapagamentofattura=datapagamentofattura, scadenza_fattura=scadenza_fattura , 
						 giorni_pagamento_fattura=giorni_pagamento_fattura , altri_oneri=altri_oneri,
						descrizione_altri_oneri=descrizione_altri_oneri,spese_spedizione=spese_spedizione, totale_fattura_tasse_escluse=totale_fattura_tasse_escluse, 
						totale_iva_fattura=totale_iva_fattura,totale_sconto_applicato_fattura=totale_sconto_applicato_fattura, 
						totale_fattura=totale_fattura)
					invoice.save()

					a=Invoice.objects.get(invoice_id=invoice_id)
					formset=prodottiFormset(request.POST, instance=a)
					
					if formset.is_valid():
						formset.save()
						context = {
						'title' : 'Invoice ' + invoice_id,
						'invoice' : invoice,
						'documento':nome_documento,
						'formset':formset,
						'message':'dati salvati correttamente',
						}
						nomecliente=customer.ragionesociale
						document_legal='fattura'+ '_' + invoice_id + '_' + nomecliente
						
						return HttpResponseRedirect(reverse('success_document_legal', args=[document_legal]))

					

					else:
						context = {
						'title' : 'Invoice ' + invoice_id,
						'invoice' : invoice,
						
						'formset':formset,
						'message':'dati salvati correttamente',
						}
						nomecliente=customer.ragionesociale
						document_legal='fattura'+ '_' + invoice_id + '_' + nomecliente
						
						return HttpResponseRedirect(reverse('error_document_legal', args=[document_legal]))
						


	
					
				elif request.method == 'GET':

					invoice =  Invoice( invoice_id=invoice_id, customer=customer, date=dataoggi)
					formset = prodottiFormset()
					context = {
							'title' : 'Invoice ' + invoice_id,
							'invoice':invoice,
							'documento':nome_documento,
							'formset':formset,
							'message':'dati salvati correttamente',
							}
						
					return render(request, 'invoice.html', context)




			elif tipo_documento =='nota_di_credito':
				nome_documento='Nota di credito'
				status='annullamento fattura n.'
				fattura_riferimento_url=linkviewsdocumenti_fiscali.split('?')[2]
				fattura_riferimento=str(fattura_riferimento_url)

				if request.method=='GET':
					try:
						id_dal_databse=Invoice.objects.latest("invoice_id")
						id_ultimo=id_dal_databse.invoice_id
						id_solo_serie=id_ultimo.split('-')[0]
						id_integer=int(id_solo_serie)
						idincremento=id_integer+1
						#estrazione solo anno inserito
						anno_inserito=id_ultimo.split('-')[1]
						if anno_corrente_stringa == anno_inserito:
							invoice_id=str(idincremento) +'-' + anno_corrente_stringa
						else:
							invoice_id=str(1)+ '-' + anno_corrente_stringa
					
					except Invoice.DoesNotExist:		
							return HttpResponseRedirect(reverse('new_invoice'))
					
					
					
					

					a=Invoice.objects.get(invoice_id=fattura_riferimento)
					prodottivisualizzati_Formset=inlineformset_factory(Invoice, prodotti, form=visualizza_prodotti, extra=0)#per ilformset

					formset=prodottivisualizzati_Formset(instance=a)
					invoice =  Nota_di_credito(invoice=a, date=dataoggi,status=status,nota_id=invoice_id)
					
					#invoice.save()
					context = {
					'title' : 'nota di credito ' + invoice_id,
					'invoice' : invoice,
					#'formset':formset,
					'nome_documento':'Nota di credito',
					'message':'dati salvati correttamente',
					'formset':formset
					}
					
					return render(request, 'nota_di_credito.html', context)

				elif request.method=='POST':
					try:
						id_dal_databse=Invoice.objects.latest("invoice_id")
						id_ultimo=id_dal_databse.invoice_id
						id_solo_serie=id_ultimo.split('-')[0]
						id_integer=int(id_solo_serie)
						idincremento=id_integer+1
						#estrazione solo anno inserito
						anno_inserito=id_ultimo.split('-')[1]
						if anno_corrente_stringa == anno_inserito:
							invoice_id=str(idincremento) +'-' + anno_corrente_stringa
						else:
							invoice_id=str(1)+ '-' + anno_corrente_stringa
					
					except Invoice.DoesNotExist:		
							return HttpResponseRedirect(reverse('new_invoice'))
						
					note = request.POST["note"]
					descrizione_altri_motivi=request.POST["descrizione_altri_motivi"]
						
					
					a=Invoice.objects.get(invoice_id=fattura_riferimento)
					prodottivisualizzati_Formset=inlineformset_factory(Invoice, prodotti, form=visualizza_prodotti, extra=0)#per ilformset

					formset=prodottivisualizzati_Formset(instance=a)



					invoice =  Nota_di_credito(invoice=a, date=dataoggi,status=status,note=note,eventuali_motivi=descrizione_altri_motivi, nota_id=invoice_id)
					#invoice.save()
					invoice.save()
					a.Nota_di_credito='1'
					a.save()
					cliente_fittizio=Customer.objects.get(customer_id=2)
					inserimento_solo_nuovo_id=Invoice(invoice_id=invoice_id,customer=cliente_fittizio)
					inserimento_solo_nuovo_id.save()
					context = {
					'title' : 'nota di credito ' + invoice_id,
					'invoice' : invoice,
					'nome_documento':'Nota di credito',
					'message':'dati salvati correttamente',
					'formset':formset
					}
					
					return render(request, 'nota_di_credito.html', context)

						
				
					

	#else:
		
		#return redirect(reverse('new_invoice'))

def success_legal_document(request,document_legal):
	tipodocumento=document_legal.split('_')[0]
	numerofattura=document_legal.split('_')[1]
	nomecliente=document_legal.split('_')[2]

	context={'nomecliente':nomecliente,'tipodocumento':tipodocumento,'numerofattura':numerofattura }

	return render(request, 'successo_document_legal.html', context)

def error_legal_document(request,document_legal):
	tipodocumento=document_legal.split('_')[0]
	numerofattura=document_legal.split('_')[1]
	nomecliente=document_legal.split('_')[2]

	context={'nomecliente':nomecliente,'tipodocumento':tipodocumento,'numerofattura':numerofattura }

	return render(request, 'problem_legal_document.html', context)



# Default invoice list, show 25 recent invoices
@login_required(login_url='login/')
def index(request):
    invoices = Invoice.objects.order_by('-date')[:25]
    context = {
		'title' : 'Recent Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)




@login_required
def invoices_list(request):
	invoices = Invoice.objects.all()

	try:
		ultimoid_invoice=Invoice.objects.latest('id','invoice_id')
	
	except Invoice.DoesNotExist:
		ultimoid_invoice= 'non è presente nessuna fattura'


	context = {
		'title' : 'Lista delle fatture',
		'invoices' : invoices,
		'ultimoid_invoice' : ultimoid_invoice,
	}
	return render(request, 'invoices.html', context)



# Dettagli fattura
def view_invoice(request, invoice_id):
		invoice = get_object_or_404(Invoice, invoice_id=invoice_id)
		data_pagamento_fattura=request.POST['data_pagamento_fattura']
		cambio_status=request.POST['status']
		
		prezzo_p=invoice.prezzo
		scadenza_fattura_p=invoice.scadenza_fattura
		giorni_pagamento_fattura_p=invoice.giorni_pagamento_fattura
		numero_riga_p=invoice.numero_riga
		prodotto_p=invoice.prodotto
		descrizione_p=invoice.descrizione
		quantita_p=invoicequantita
		sconto_p=invoice.sconto
		prezzo_sub_tot_p=invoice.prezzo_sub_tot
		tax_p=invoice.tax
		tipo_di_sconto_p=invoice.tipo_di_sconto
		altri_oneri_p=invoice.altri_oneri
		descrizione_altri_oneri_p=invoice.descrizione_altri_oneri
		spese_spedizione_p=invoice.spese_spedizione
		totale_fattura_tasse_escluse_p=invoice.totale_fattura_tasse_escluse
		totale_iva_fattura_p=invoice.totale_iva_fattura
		totale_sconto_applicato_fattura_p=invoice.totale_sconto_applicato_fattura
		totale_fattura_p=invoice.totale_fattura

		#creazione della lista per ogni denominazione senza i divisori
		prezzo=prezzo_p.split('@')
		print(prezzo)
		scadenza_fattura=scadenza_fattura_p.split('@')
		giorni_pagamento_fattura=giorni_pagamento_fattura_p.split('@')
		numero_riga=numero_riga.split('@')
		prodotto=prodotto_p.split('@')
		descrizione=descrizione_p.split('@')
		quantita=quantita_p.split('@')
		sconto=sconto_p.split('@')
		prezzo_sub_tot=prezzo_sub_tot_p.split('@')
		tax=tax_p.split('@')
		tipo_di_sconto=tipo_di_sconto_p.split('@')
		altri_oneri=altri_oneri_p.split('@')
		descrizione_altri_oneri=descrizione_altri_oneri_p.split('@')
		spese_spedizione=spese_spedizione_p.split('@')
		totale_fattura_tasse_escluse=totale_fattura_tasse_escluse_p.split('@')
		totale_iva_fattura=totale_iva_fattura_p.split('@')
		totale_sconto_applicato_fattura=totale_sconto_applicato_fattura_p.split('@')
		totale_fattura=totale_fattura_p.split('@')




		if request.method == "POST":
			if data_pagamento_fattura =='':
				data_pagamento_fattura ='ancora da saldare'
			if cambio_status =='':
				cambio_status='non pagato'
			invoice.datapagamentofattura=data_pagamento_fattura
			invoice.status=cambio_status
			invoice.save()
			return render( request, 'dettagli_fattura.html', context={'invoice': invoice})
			
		else:
			invoice = get_object_or_404(Invoice, invoice_id=invoice_id)
			return render( request, 'dettagli_fattura.html', context={'invoice': invoice})






''' Cancella fattura e emissione nota di credito
@login_required
def nota_di_credito(request, invoice_id):
	fattura = get_object_or_404(Invoice, pk=invoice_id)
	fattura.stato_cliente_dato="archiviato"
	customer.save()
	return HttpResponseRedirect(reverse('customer_list'))
'''


# Show draft invoices
@login_required(login_url='login/')
def draft_invoices(request):
    invoices = Invoice.objects.filter(status='Draft').order_by('-date')
    context = {
		'title' : 'Draft Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)



# Show paid invoices
@login_required(login_url='login/')
def paid_invoices(request):
    invoices = Invoice.objects.filter(status='Paid').order_by('-date')
    context = {
		'title' : 'Paid Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)



# Show unpaid invoices
@login_required(login_url='login/')
def unpaid_invoices(request):
    invoices = Invoice.objects.filter(status='Unpaid').order_by('-date')
    context = {
		'title' : 'Unpaid Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)

#itemFattura(request, invoice_id)

'''# Display a specific invoice.
@login_required
def invoice(request, invoice_id):
			datitemporanei=dati_temporanei.objects.last()
			date=datitemporanei.date
			status='non-pagato'
			pagamentofattura=date
			customer=datitemporanei.customer
			print(customer)
			print(status)
			print(pagamentofattura)
			print(date)
			
			invoice =  Invoice( invoice_id=datitemporanei.invoice_id, customer=customer, date=date,status=status, pagamentofattura=pagamentofattura)
			FatturaFormSet=modelformset_factory(Invoice, form=prodottiForm)
			formset=FatturaFormSet(request.POST, queryset= prodotti.objects.none(), prefix='prodotti_fattura')
			
			
				
			if formset.is_valid():
					
					try:
						
						invoice.save()

						
						for prodotto in formset:
							data=prodotto.save(commit=False)
							data.invoice=invoice.id
							data.save()
							print(prodotto)
							print(type(prodotto))
							eliminaprimodato=dati_temporanei.objects.all()
							eliminaprimodato.delete()
							context = {
							'title' : 'Invoice ' + invoice_id,
							'invoice' : invoice,
							'formset':formset,
							'message':'dati salvati correttamente',
							}
							
							return render(request, 'invoice.html', context)
				
					except:
								formset=FatturaFormSet()
								eliminaprimodato=dati_temporanei.objects.last()
								eliminaprimodato.delete()
								context={
								'title' : 'Invoice ' + invoice_id,
								'invoice' : invoice,
								'formset':formset,
								'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
								
								}
								return render(reverse('new_invoice'))



			else:
								formset=FatturaFormSet()
								eliminaprimodato=dati_temporanei.objects.last()
								eliminaprimodato.delete()
								context={
								'title' : 'Invoice ' + invoice_id,
								'invoice' : invoice,
								'formset':formset,
								'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
								
								}
								return render(request, 'invoice.html', context)
				
			else:
				invoice = Invoice( invoice_id=invoice_id, customer=customer, date=dataoggi)
				print(invoice,'ciao')
				print(type(invoice))
				formset = prodottiformSet()
				context = {
				'title' : 'Invoice ' + str(invoice_id),
				'invoice' : invoice,
				'formset':formset,
				'message':'ci sono satati degli errori controlla e reinvia'
				}

				return render(request, 'invoice.html', context)'''
	



'''# Search for invoice
@login_required(login_url='login/')
def search_invoice(request):
    id = request.POST['id']
    return HttpResponseRedirect(reverse('invoice', args=(id,)))'''





# Print invoice
@login_required(login_url='login/')
def print_invoice(request, invoice_id):
    invoice = get_object_or_404(Invoice, pk=invoice_id)
    context = {
		'title' : "Invoice " + str(invoice_id),
	    'invoice' : invoice,
	}
    return render(request, 'print_invoice.html', context)



# Delete an invoice
@login_required(login_url='login/')
def delete_invoice(request, invoice_id):
    invoice = get_object_or_404(Invoice, pk=invoice_id)
    invoice.delete()
    return HttpResponseRedirect(reverse('index'))



# Update invoice
@login_required(login_url='login/')
def update_invoice(request, invoice_id):
	invoice = get_object_or_404(Invoice, pk=invoice_id)
	try:
		invoice.date = datetime.datetime.strptime(request.POST['date'], "%d/%m/%Y")
		invoice.status = request.POST['status']
		invoice.save()
	except (KeyError, Invoice.DoesNotExist):
		return render(request, 'invoice.html', {
			'invoice': invoice,
			'error_message': 'Si è verificato un problema, non sono stato in grado di aggiornare la fattura',
		})
	else:
		context = {
			'confirm_update' : True,
			'title' : 'Invoice ' + str(invoice_id),
			'invoice' : invoice,
			}
		return render(request, 'invoice.html', context)



# Upload attachment for invoice
@login_required(login_url='login/')
def upload_invoice_attachment(request, invoice_id):
    myfile = request.FILES['file']
    invoice = get_object_or_404(Invoice, pk=invoice_id)

    fs = FileSystemStorage()
    fs.save(myfile.name, myfile)

    e = invoice.invoiceattachment_set.create(file=myfile, displayname=myfile.name)
    e.save()

    return HttpResponseRedirect(reverse('invoice', args=(invoice.id,)))



# Delete attachment from invoice
@login_required(login_url='login/')
def delete_invoice_attachment(request, invoice_id, invoiceattachment_id):
	invoice = get_object_or_404(Invoice, pk=invoice_id)
	invoiceattachment = get_object_or_404(InvoiceAttachment, pk=invoiceattachment_id)
	try:
		invoiceattachment.delete()
		fs = FileSystemStorage()
		fs.delete(invoiceattachment)
	except:
		context = {
			'error_message' : "Unable to delete attachment!",
			'invoice_id' : invoice_id
		}
		return render(request, 'view_invoice.html', context)
	else:
		return HttpResponseRedirect(reverse('invoice', args=(invoice.id,)))
