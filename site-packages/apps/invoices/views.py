from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render,redirect
from django.urls import reverse
from django.core.files.storage import FileSystemStorage
from django.contrib.auth.decorators import login_required
import datetime
from django.contrib import messages
from django.forms import formset_factory,modelformset_factory
from apps.customer.models import Customer
from apps.expenses.models import Expense
from apps.items.models import InvoiceItem

from .models import Invoice,  Preventivo, Nota_di_credito
from forms import offertainternetForm, cadenzapagamentoform, metodopagamento, offertavoipForm,prodottiFatturaForm,prodotti_preventivoForm,nota_di_creditoForm



# Create new invoice
@login_required
def new_invoice(request):

	# If no customer_id is defined, create a new invoice
	if request.method  == 'POST':
		ragionesociale = request.POST["ragionesociale"]
		tipo_documento=request.POST["documento"]
		if ragionesociale =='None':
			customers = Customer.objects.order_by('ragionesociale')
			context = {
				'title' : 'Nuova fattura',
				'customer_list' : customers,
				'message' : 'Seleziona un cliente',
				}
			return render(request, 'new_invoice.html', context)
		else:
			customer = get_object_or_404(Customer, pk=ragionesociale)
			idcliente=customer.customer_id
			idclientestr=str(idcliente)
			url=idclientestr+"-"+tipo_documento

			return HttpResponseRedirect(reverse('invoice', args=[url]))
			
	else:
		# Customer list needed to populate select field
		customers = Customer.objects.order_by('ragionesociale')
		context = {
			'title' : 'New Invoice',
			'customer_list' : customers,
		}
		return render(request, 'new_invoice.html', context)



@login_required
def invoice(request, url):
	
	#if request.method  == 'POST':
			dataoggi=datetime.date.today()
			idclientestr=url.split('-')[0]
			idcliente=int(idclientestr)
			tipo_documento=url.split('-')[1]
			
			if tipo_documento == 'preventivo':
				customer = get_object_or_404(Customer, pk=idcliente)
				nome_documento='Preventivo'
				status='preventivo'
				anno_corrente = dataoggi.year
				anno_corrente_stringa = str(anno_corrente)
				try:
					id_dal_databse=Preventivo.objects.latest('invoice_id')
					id_ultimo=id_dal_databse.invoice_id
					print(id_ultimo)
					id_solo_serie=id_ultimo.split('-')[0]
					id_integer=int(id_solo_serie)
					idincremento=id_integer+1
					#estrazione solo anno inserito
					anno_inserito=id_ultimo.split('-')[1]
					if anno_corrente_stringa == anno_inserito:
						invoice_id=str(idincremento) +'-' + anno_corrente_stringa
					else:
						invoice_id=str(1)+ '-' + anno_corrente_stringa
				
				except Preventivo.DoesNotExist:
					invoice_id=str(1) + '-' + anno_corrente_stringa
				
				invoice =  Preventivo( invoice_id=invoice_id, customer=customer, date=dataoggi,status=status, pagamentofattura=dataoggi, documento =nome_documento)
						
				try:
					
					invoice.save()


					context = {
					'title' : 'Invoice ' + invoice_id,
					'invoice' : invoice,
					#'formset':formset,
					'message':'dati salvati correttamente',
					}
					
					return render(request, 'invoice.html', context)

					
			
				except:
							context={
							'title' : 'Invoice ' + invoice_id,
							'invoice' : invoice,
							'message':'Errore, I prodotti del preventivo non sono stati correttamente salvati. Riprova',
							
							}
							return render(request, 'invoice.html', context)

			


			elif tipo_documento =='fattura':
				customer = get_object_or_404(Customer, pk=idcliente)
				nome_documento='Fattura'
				status='non-pagato'
				anno_corrente = dataoggi.year
				anno_corrente_stringa = str(anno_corrente)
				try:
					id_dal_databse=Invoice.objects.latest("invoice_id")
					id_ultimo=id_dal_databse.invoice_id
					id_solo_serie=id_ultimo.split('-')[0]
					id_integer=int(id_solo_serie)
					idincremento=id_integer+1
					#estrazione solo anno inserito
					anno_inserito=id_ultimo.split('-')[1]
					if anno_corrente_stringa == anno_inserito:
						invoice_id=str(idincremento) +'-' + anno_corrente_stringa
					else:
						invoice_id=str(1)+ '-' + anno_corrente_stringa
				
				except Invoice.DoesNotExist:
					invoice_id=str(1)+ '-' + anno_corrente_stringa
				
				invoice =  Invoice( documento=nome_documento, invoice_id=invoice_id, customer=customer, date=dataoggi,status=status, pagamentofattura=dataoggi)
						
				try:
					
					invoice.save()
					

					context = {
					'title' : 'Invoice ' + invoice_id,
					'invoice' : invoice,
					#'formset':formset,
					'message':'dati salvati correttamente',
					}
					
					return render(request, 'invoice.html', context)

					
			
				except:
							context={
							'title' : 'Invoice ' + invoice_id,
							'invoice' : invoice,
							
							'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
							
							}
							return render(request, 'invoice.html', context)


			elif tipo_documento =='nota_di_credito':
				customer = get_object_or_404(Customer, pk=idcliente)
				nome_documento='Nota di credito'
				#fattura_riferimento=get_object_or_404(Invoice, pk=)
				status='annullamento fattura n.'
				anno_corrente = dataoggi.year
				anno_corrente_stringa = str(anno_corrente)
				try:
					id_dal_databse=Invoice.objects.latest("invoice_id")
					id_ultimo=id_dal_databse.invoice_id
					id_solo_serie=id_ultimo.split('-')[0]
					id_integer=int(id_solo_serie)
					idincremento=id_integer+1
					#estrazione solo anno inserito
					anno_inserito=id_ultimo.split('-')[1]
					if anno_corrente_stringa == anno_inserito:
						invoice_id=str(idincremento) +'-' + anno_corrente_stringa
					else:
						invoice_id=str(1)+ '-' + anno_corrente_stringa
				
				except Invoice.DoesNotExist:
					invoice_id=str(1)+ '-' + anno_corrente_stringa
				
				invoice =  Nota_di_credito( documento=nome_documento, invoice_id=invoice_id, customer=customer, date=dataoggi,status=status, pagamentofattura=dataoggi)
						
				try:
					
					invoice.save()
					

					context = {
					'title' : 'Invoice ' + invoice_id,
					'invoice' : invoice,
					#'formset':formset,
					'message':'dati salvati correttamente',
					}
					
					return render(request, 'invoice.html', context)

					
			
				except:
							context={
							'title' : 'Invoice ' + invoice_id,
							'invoice' : invoice,
							
							'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
							
							}
							return render(request, 'invoice.html', context)
	

	#else:
		
		#return redirect(reverse('new_invoice'))









# Default invoice list, show 25 recent invoices
@login_required
def index(request):
    invoices = Invoice.objects.order_by('-date')[:25]
    context = {
		'title' : 'Recent Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)




# Show big list of all invoices
@login_required
def all_invoices(request):
    invoices = Invoice.objects.order_by('-date')
    context = {
		'title' : 'All Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)



# Show draft invoices
@login_required
def draft_invoices(request):
    invoices = Invoice.objects.filter(status='Draft').order_by('-date')
    context = {
		'title' : 'Draft Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)



# Show paid invoices
@login_required
def paid_invoices(request):
    invoices = Invoice.objects.filter(status='Paid').order_by('-date')
    context = {
		'title' : 'Paid Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)



# Show unpaid invoices
@login_required
def unpaid_invoices(request):
    invoices = Invoice.objects.filter(status='Unpaid').order_by('-date')
    context = {
		'title' : 'Unpaid Invoices',
        'invoice_list' : invoices,
    }
    return render(request, 'index.html', context)

#itemFattura(request, invoice_id)

'''# Display a specific invoice.
@login_required
def invoice(request, invoice_id):
			datitemporanei=dati_temporanei.objects.last()
			date=datitemporanei.date
			status='non-pagato'
			pagamentofattura=date
			customer=datitemporanei.customer
			print(customer)
			print(status)
			print(pagamentofattura)
			print(date)
			
			invoice =  Invoice( invoice_id=datitemporanei.invoice_id, customer=customer, date=date,status=status, pagamentofattura=pagamentofattura)
			FatturaFormSet=modelformset_factory(Invoice, form=prodottiForm)
			formset=FatturaFormSet(request.POST, queryset= prodotti.objects.none(), prefix='prodotti_fattura')
			
			
				
			if formset.is_valid():
					
					try:
						
						invoice.save()

						
						for prodotto in formset:
							data=prodotto.save(commit=False)
							data.invoice=invoice.id
							data.save()
							print(prodotto)
							print(type(prodotto))
							eliminaprimodato=dati_temporanei.objects.all()
							eliminaprimodato.delete()
							context = {
							'title' : 'Invoice ' + invoice_id,
							'invoice' : invoice,
							'formset':formset,
							'message':'dati salvati correttamente',
							}
							
							return render(request, 'invoice.html', context)
				
					except:
								formset=FatturaFormSet()
								eliminaprimodato=dati_temporanei.objects.last()
								eliminaprimodato.delete()
								context={
								'title' : 'Invoice ' + invoice_id,
								'invoice' : invoice,
								'formset':formset,
								'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
								
								}
								return render(reverse('new_invoice'))



			else:
								formset=FatturaFormSet()
								eliminaprimodato=dati_temporanei.objects.last()
								eliminaprimodato.delete()
								context={
								'title' : 'Invoice ' + invoice_id,
								'invoice' : invoice,
								'formset':formset,
								'message':'Errore, I prodotti in fattura non sono stati correttamente salvati',
								
								}
								return render(request, 'invoice.html', context)
				
			else:
				invoice = Invoice( invoice_id=invoice_id, customer=customer, date=dataoggi)
				print(invoice,'ciao')
				print(type(invoice))
				formset = prodottiformSet()
				context = {
				'title' : 'Invoice ' + str(invoice_id),
				'invoice' : invoice,
				'formset':formset,
				'message':'ci sono satati degli errori controlla e reinvia'
				}

				return render(request, 'invoice.html', context)'''
	



'''# Search for invoice
@login_required(login_url='login/')
def search_invoice(request):
    id = request.POST['id']
    return HttpResponseRedirect(reverse('invoice', args=(id,)))'''





# Print invoice
@login_required
def print_invoice(request, invoice_id):
    invoice = get_object_or_404(Invoice, pk=invoice_id)
    context = {
		'title' : "Invoice " + str(invoice_id),
	    'invoice' : invoice,
	}
    return render(request, 'print_invoice.html', context)



# Delete an invoice
@login_required
def delete_invoice(request, invoice_id):
    invoice = get_object_or_404(Invoice, pk=invoice_id)
    invoice.delete()
    return HttpResponseRedirect(reverse('index'))



# Update invoice
@login_required
def update_invoice(request, invoice_id):
	invoice = get_object_or_404(Invoice, pk=invoice_id)
	try:
		invoice.date = datetime.datetime.strptime(request.POST['date'], "%d/%m/%Y")
		invoice.status = request.POST['status']
		invoice.save()
	except (KeyError, Invoice.DoesNotExist):
		return render(request, 'invoice.html', {
			'invoice': invoice,
			'error_message': 'Si è verificato un problema, non sono stato in grado di aggiornare la fattura',
		})
	else:
		context = {
			'confirm_update' : True,
			'title' : 'Invoice ' + str(invoice_id),
			'invoice' : invoice,
			}
		return render(request, 'invoice.html', context)



# Upload attachment for invoice
@login_required
def upload_invoice_attachment(request, invoice_id):
    myfile = request.FILES['file']
    invoice = get_object_or_404(Invoice, pk=invoice_id)

    fs = FileSystemStorage()
    fs.save(myfile.name, myfile)

    e = invoice.invoiceattachment_set.create(file=myfile, displayname=myfile.name)
    e.save()

    return HttpResponseRedirect(reverse('invoice', args=(invoice.id,)))



# Delete attachment from invoice
@login_required
def delete_invoice_attachment(request, invoice_id, invoiceattachment_id):
	invoice = get_object_or_404(Invoice, pk=invoice_id)
	invoiceattachment = get_object_or_404(InvoiceAttachment, pk=invoiceattachment_id)
	try:
		invoiceattachment.delete()
		fs = FileSystemStorage()
		fs.delete(invoiceattachment)
	except:
		context = {
			'error_message' : "Unable to delete attachment!",
			'invoice_id' : invoice_id
		}
		return render(request, 'view_invoice.html', context)
	else:
		return HttpResponseRedirect(reverse('invoice', args=(invoice.id,)))
